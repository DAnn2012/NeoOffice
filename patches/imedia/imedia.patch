Index: FMDatabase.m
--- FMDatabase.m	2012-10-03 17:14:25.000000000 -0700
+++ FMDatabase.m	2013-01-12 15:16:51.000000000 -0800
@@ -233,8 +233,12 @@
                 NSLog(@"DB Query: %@", sql);
                 if (crashOnErrors) {
 #ifdef __BIG_ENDIAN__
+#if __GNUC__ < 4
+                    __asm__( "trap" );
+#else
                     asm{ trap };
 #endif
+#endif
                     *(long*)0 = 0xDEADBEEF;
                 }
             }
@@ -324,7 +328,11 @@
                 NSLog(@"DB Query: %@", sql);
                 if (crashOnErrors) {
                     #ifdef __BIG_ENDIAN__
+#if __GNUC__ < 4
+                    __asm__( "trap" );
+#else
                     asm{ trap };
+#endif
                     #endif
                     *(long*)0 = 0xDEADBEEF;
                 }
Index: MUPhotoView.h
--- MUPhotoView.h	2012-10-03 17:14:25.000000000 -0700
+++ MUPhotoView.h	2013-01-12 15:16:51.000000000 -0800
@@ -178,7 +178,6 @@
 
 #pragma mark -
 // Seriously, Don't Mess With Texas
-#pragma mark Seriously, Don't Mess With Texas
 // haven't tested changing these behaviors yet - there's no reason they shouldn't work... but use at your own risk.
 - (float)photoVerticalSpacing;
 - (void)setPhotoVerticalSpacing:(float)aPhotoVerticalSpacing;
Index: MUPhotoView.m
--- MUPhotoView.m	2012-10-03 17:14:25.000000000 -0700
+++ MUPhotoView.m	2013-01-12 15:16:51.000000000 -0800
@@ -630,7 +630,6 @@
 
 #pragma mark -
 // Don't Mess With Texas
-#pragma mark Don't Mess With Texas
 // haven't tested changing these behaviors yet - there's no reason they shouldn't work... but use at your own risk.
 
 - (float)photoVerticalSpacing
Index: MetadataUtility.m
--- MetadataUtility.m	2012-10-03 17:14:25.000000000 -0700
+++ MetadataUtility.m	2013-01-12 15:16:51.000000000 -0800
@@ -115,9 +122,18 @@
 
 - (void)dealloc
 {
-    [myServerIdentifier release]; myServerIdentifier = nil;
-    [myServerTask release]; myServerTask = nil;
-    [myServerProxy release]; myServerProxy = nil;
+	if(myServerIdentifier)
+	{
+	    [myServerIdentifier release]; myServerIdentifier = nil;
+	}
+	if(myServerTask)
+	{
+	    [myServerTask release]; myServerTask = nil;
+	}
+	if(myServerProxy)
+	{
+	    [myServerProxy release]; myServerProxy = nil;
+	}
     
     [myLock release]; myLock = nil;
     
@@ -248,7 +264,7 @@
         
         [self performSelectorOnMainThread:@selector(getMetadataWithArguments:) withObject:arguments waitUntilDone:YES];
         
-        NSArray *mediaTypes = [attributes objectForKey:@"kMDItemMediaTypes"];
+        NSArray *mediaTypes = [arguments objectForKey:@"kMDItemMediaTypes"];
         if ( mediaTypes != nil && [mediaTypes containsObject:@"Sound"] )
         {
             return [NSDictionary dictionaryWithDictionary:arguments];
Index: NSWindow_Flipr.h
--- NSWindow_Flipr.h	2012-10-03 17:14:25.000000000 -0700
+++ NSWindow_Flipr.h	2013-01-12 15:16:50.000000000 -0800
@@ -10,21 +10,21 @@
 
 // Read the "ReadMe.rtf" file for general discussion.
 
-@interface NSWindow (NSWindow_Flipr)
+@interface NSWindow (NSWindow_Flipr_iMediaBrowse)
 
 // Call during initialization this to prepare the flipping window.
 // If you don't call this, the first flip will take a little longer.
 
-+ (NSWindow*)flippingWindow;
++ (NSWindow*)flippingWindow_iMediaBrowse;
 
 // Call this if you want to release the flipping window. If you flip
 // again after calling this, it will take a little longer.
 
-+ (void)releaseFlippingWindow;
++ (void)releaseFlippingWindow_iMediaBrowse;
 
 // Call this on a visible window to flip it and show the parameter window,
 // which is supposed to not be on-screen.
 
-- (void)flipToShowWindow:(NSWindow*)window forward:(BOOL)forward reflectInto:(NSImageView*)reflection;
+- (void)flipToShowWindow_iMediaBrowse:(NSWindow*)window forward:(BOOL)forward reflectInto:(NSImageView*)reflection;
 
 @end
Index: NSWindow_Flipr.m
--- NSWindow_Flipr.m	2012-10-03 17:14:25.000000000 -0700
+++ NSWindow_Flipr.m	2013-01-12 15:16:50.000000000 -0800
@@ -17,11 +17,11 @@
 
 // We subclass NSAnimation to maximize frame rate, instead of using progress marks.
 
-@interface FliprAnimation : NSAnimation {
+@interface FliprAnimation_iMediaBrowse : NSAnimation {
 }
 @end
 
-@implementation FliprAnimation
+@implementation FliprAnimation_iMediaBrowse
 
 // We initialize the animation with some huge default value.
 
@@ -46,7 +46,7 @@
 	if ([self isAnimating]&&(progress<0.99)) {
 /// Update the window unless we're nearly at the end. No sense duplicating the final window.
 // We can be sure the delegate responds to display.
-		[[self delegate] display];
+		[(NSWindow *)[self delegate] display];
 	}
 }
 
@@ -54,20 +54,20 @@
 
 // This is the flipping window's content view.
 
-@interface FliprView : NSView {
+@interface FliprView_iMediaBrowse : NSView <NSAnimationDelegate> {
 	NSRect originalRect;			// this rect covers the initial and final windows.
 	NSWindow* initialWindow;
 	NSWindow* finalWindow;
     CIImage* finalImage;			// this is the rendered image of the final window.
 	CIFilter* transitionFilter;
 	NSShadow* shadow;
-	FliprAnimation* animation;
+	FliprAnimation_iMediaBrowse* animation;
 	float direction;				// this will be 1 (forward) or -1 (backward).
 	float frameTime;				// time for last drawRect:
 }
 @end
 
-@implementation FliprView
+@implementation FliprView_iMediaBrowse
 
 // The designated initializer; will be called when the flipping window is set up.
 
@@ -116,7 +116,7 @@
 // they go away during the animation. We assume both windows have the exact same frame.
 
 - (void)setInitialWindow:(NSWindow*)initial andFinalWindow:(NSWindow*)final forward:(BOOL)forward reflectInto:(NSImageView*)reflection {
-	NSWindow* flipr = [NSWindow flippingWindow];
+	NSWindow* flipr = [NSWindow flippingWindow_iMediaBrowse];
 	if (flipr) {
 		[NSCursor hide];
 		initialWindow = initial;
@@ -195,7 +195,7 @@
 // This will draw the first frame at value 0, duplicating the initial window. This is not really optimal,
 // but we need to compensate for the time spent here, which seems to be about 3 to 5x what's needed
 // for subsequent frames.
-		animation = [[FliprAnimation alloc] initWithAnimationCurve:NSAnimationEaseInOut];
+		animation = [[FliprAnimation_iMediaBrowse alloc] initWithAnimationCurve:NSAnimationEaseInOut];
 		[animation setDelegate:self];
 // This is probably redundant...
 		[animation setCurrentProgress:0.0];
@@ -228,7 +228,7 @@
 - (void)animationDidEnd:(NSAnimation*)theAnimation {
 // We order the flipping window out and make the final window visible again.
 	NSDisableScreenUpdates();
-	[[NSWindow flippingWindow] orderOut:self];
+	[[NSWindow flippingWindow_iMediaBrowse] orderOut:self];
 	[finalWindow setAlphaValue:1.0];
 	[finalWindow display];
 	NSEnableScreenUpdates();
@@ -297,7 +297,7 @@
 
 @end
 
-@implementation NSWindow (NSWindow_Flipr)
+@implementation NSWindow (NSWindow_Flipr_iMediaBrowse)
 
 // This function checks if the CPU can perform flipping. We assume all Intel Macs can do it,
 // but PowerPC Macs need AltiVec.
@@ -319,7 +319,7 @@
 
 // Get (and initialize, if necessary) the flipping window.
 
-+ (NSWindow*)flippingWindow {
++ (NSWindow*)flippingWindow_iMediaBrowse {
 	if (!flippingWindow) {
 // We initialize the flipping window if the CPU can do it...
 		if (CPUIsSuitable()) {
@@ -333,7 +333,7 @@
 			frame.origin = NSZeroPoint;
 // The inset values seem large enough so the animation doesn't slop over the frame.
 // They could be calculated more exactly, though.
-			FliprView* view = [[[FliprView alloc] initWithFrame:frame andOriginalRect:NSInsetRect(frame,64,256)] autorelease];
+			FliprView_iMediaBrowse* view = [[[FliprView_iMediaBrowse alloc] initWithFrame:frame andOriginalRect:NSInsetRect(frame,64,256)] autorelease];
 			[view setAutoresizingMask:NSViewWidthSizable|NSViewHeightSizable];
 			[flippingWindow setContentView:view];
 		}
@@ -343,17 +343,17 @@
 
 // Release the flipping window.
 
-+ (void)releaseFlippingWindow {
++ (void)releaseFlippingWindow_iMediaBrowse {
 	[flippingWindow autorelease];
 	flippingWindow = nil;
 }
 
 // This is called from outside to start the animation process.
 
-- (void)flipToShowWindow:(NSWindow*)window forward:(BOOL)forward reflectInto:(NSImageView*)reflection {
+- (void)flipToShowWindow_iMediaBrowse:(NSWindow*)window forward:(BOOL)forward reflectInto:(NSImageView*)reflection {
 // We resize the final window to exactly the same frame.
 	[window setFrame:[self frame] display:NO];
-	NSWindow* flipr = [NSWindow flippingWindow];
+	NSWindow* flipr = [NSWindow flippingWindow_iMediaBrowse];
 	if (!flipr) {
 // If we fall in here, the CPU isn't able to animate and we just change windows.
 		[window makeKeyAndOrderFront:self];
@@ -361,7 +361,7 @@
 		return;
 	}
 	[flipr setLevel:[self level]];
-	[(FliprView*)[flipr contentView] setInitialWindow:self andFinalWindow:window forward:forward reflectInto:reflection];
+	[(FliprView_iMediaBrowse*)[flipr contentView] setInitialWindow:self andFinalWindow:window forward:forward reflectInto:reflection];
 }
 
 @end
Index: iMBAbstractView.m
--- iMBAbstractView.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBAbstractView.m	2013-01-14 10:08:50.000000000 -0800
@@ -402,6 +467,7 @@
 		
 		[d setObject:customFolders forKey:[NSString stringWithFormat:@"%@Dropped", [(NSObject*)self className]]];
 		[[NSUserDefaults standardUserDefaults] setObject:d forKey:[NSString stringWithFormat:@"iMB-%@", [[iMediaConfiguration sharedConfiguration] identifier]]];
+		[[NSUserDefaults standardUserDefaults] synchronize];
 	}
 
 	return results;
@@ -514,13 +515,6 @@
 	[[NSNotificationCenter defaultCenter] postNotificationName:iMediaBrowserSelectionDidChangeNotification
 														object:self
 													  userInfo:info];
-	
-	if ([selectedObjects count] > 0) {
-		NSDictionary *record = [selectedObjects objectAtIndex:0];
-		NSString *path = [record valueForKey:@"ImagePath"];
-		
-		NSLog(@"%@", [iMediaBrowser enhancedRecordForPath:path ofMediaType:@"photos"]);
-	}
 }
 
 - (NSArray *)rootNodes
@@ -643,6 +718,7 @@
 	
 	[d setObject:customFolders forKey:[NSString stringWithFormat:@"%@Dropped", [(NSObject*)self className]]];
 	[[NSUserDefaults standardUserDefaults] setObject:d forKey:[NSString stringWithFormat:@"iMB-%@", [[iMediaConfiguration sharedConfiguration] identifier]]];
+	[[NSUserDefaults standardUserDefaults] synchronize];
 }
 
 #pragma mark -
Index: iMBFireFoxParser.m
--- iMBFireFoxParser.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBFireFoxParser.m	2013-01-12 15:16:51.000000000 -0800
@@ -54,11 +54,13 @@
 
 + (void)load
 {
+#if 0
 	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
 	
 	[iMediaConfiguration registerParser:[self class] forMediaType:@"links"];
 	
 	[pool release];
+#endif
 }
 
 - (id)init
Index: iMBGarageBandParser.m
--- iMBGarageBandParser.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBGarageBandParser.m	2013-01-12 15:16:51.000000000 -0800
@@ -56,11 +56,13 @@
 
 + (void)load
 {
+#if 0
 	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
 
 	[iMediaConfiguration registerParser:[self class] forMediaType:@"music"];
 	
 	[pool release];
+#endif
 }
 
 - (id)init
Index: iMBLibraryNode.m
--- iMBLibraryNode.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBLibraryNode.m	2013-01-12 15:16:51.000000000 -0800
@@ -417,6 +417,9 @@
 
 - (void)fromThreadSetAttribute:(id)attrib forKey:(NSString *)key
 {
+	if(!attrib || !key)
+		return;
+	
     NSDictionary *arguments = [NSDictionary dictionaryWithObjectsAndKeys:attrib, @"attrib", key, @"key", NULL];
     [self performSelectorOnMainThread:@selector(setAttributeForKeyFromArguments:) withObject:arguments waitUntilDone:YES];
 }
Index: iMBLinksView.m
--- iMBLinksView.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBLinksView.m	2013-01-12 15:16:51.000000000 -0800
@@ -96,9 +96,16 @@
 	 toPasteboard:(NSPasteboard*)pboard
 {
 	NSMutableArray *types = [NSMutableArray array]; // OLD BEHAVIOR: arrayWithArray:[pboard types]];
+	if([rows count]==1)
+	{
+		[types addObject:NSStringPboardType];
+	}
+	else
+	{
 	[types addObjectsFromArray:[NSPasteboard URLTypes]];
    [types addObject:iMBNativePasteboardFlavor]; // Native iMB Data
-
+	}
+	
 	[pboard declareTypes:types owner:nil];
 	
 	NSArray *content = [oLinkController arrangedObjects];
@@ -125,8 +132,15 @@
                                              [self className], iMBControllerClassName,
                                              nativeDataArray, iMBNativeDataArray,
                                              nil];
+	if([rows count]==1)
+	{
+		[pboard setString:[((NSURL *)[urls objectAtIndex:0]) absoluteString] forType:NSStringPboardType];
+	}
+	else
+	{
    [pboard setData:[NSArchiver archivedDataWithRootObject:nativeData] forType:iMBNativePasteboardFlavor]; // Native iMB Data
  	[pboard writeURLs:urls files:nil names:titles];
+   }
    
 	return YES;
 }
Index: iMBMusicFolder.m
--- iMBMusicFolder.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBMusicFolder.m	2013-01-14 12:02:17.000000000 -0800
@@ -96,7 +104,19 @@
 
 - (id)init
 {
-	return [self initWithContentsOfFile:[NSHomeDirectory() stringByAppendingPathComponent:@"Music"]];
+	NSString *musicDirPath = nil;
+	
+	NSArray *musicDirURLs = [[NSFileManager defaultManager] URLsForDirectory:NSMusicDirectory inDomains:NSUserDomainMask];
+	if( [musicDirURLs count] )
+	{
+		NSURL *firstURL = (NSURL *)[musicDirURLs objectAtIndex:0];
+		if( [firstURL isFileURL] )
+		{
+			musicDirPath = [firstURL path];
+		}
+	}
+	
+	return [self initWithContentsOfFile:musicDirPath];
 }
 
 - (void)dealloc
Index: iMBParserController.m
--- iMBParserController.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBParserController.m	2013-01-12 15:16:51.000000000 -0800
@@ -295,7 +295,8 @@
 
 - (void)recursiveLogNode:(iMBLibraryNode *)inNode
 {
-	NSLog(@"%@",[inNode recursiveIdentifier]);
+	if(!inNode)
+		return;
 	
 	NSEnumerator* e = [[inNode allItems] objectEnumerator];
 	iMBLibraryNode *node;
Index: iMBPhotosView.m
--- iMBPhotosView.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBPhotosView.m	2013-01-12 15:16:51.000000000 -0800
@@ -289,11 +289,18 @@
 	[album setObject:imageCount forKey:@"KeyList"];
 	
 	NSMutableArray *types = [NSMutableArray array]; // OLD BEHAVIOR: arrayWithArray:[pboard types]];
-	[types addObjectsFromArray:[NSPasteboard fileAndURLTypes]];
+	if([items count]==1)
+	{
+		[types addObject: NSTIFFPboardType];
+	}
+   else
+   {
+   	[types addObjectsFromArray:[NSPasteboard fileAndURLTypes]];
 	[types addObject:@"AlbumDataListPboardType"];
 	[types addObject:@"ImageDataListPboardType"];
-   [types addObject:iMBNativePasteboardFlavor]; // Native iMB Data
-
+	[types addObject:iMBNativePasteboardFlavor]; // Native iMB Data
+	}
+	
 	[pboard declareTypes:types owner:nil];
 	
 	NSEnumerator *e = [items objectEnumerator];
@@ -311,12 +318,35 @@
                                              [self className], iMBControllerClassName,
                                              items, iMBNativeDataArray,
                                              nil];
-   [pboard setData:[NSArchiver archivedDataWithRootObject:nativeData] forType:iMBNativePasteboardFlavor]; // Native iMB Data
-	[pboard writeURLs:nil files:files names:captions];
-	
-	NSDictionary *plist = [NSDictionary dictionaryWithObjectsAndKeys:[NSArray arrayWithObject:album], @"List of Albums", images, @"Master Image List", nil];
-	[pboard setString:[plist description] forType:@"AlbumDataListPboardType"];
-	[pboard setString:[images description] forType:@"ImageDataListPboardType"];
+											 
+// [ed] 3/24/08 Neo interprets URLs as raw URLs.  Place the actual file content
+// onto the pasteboard.
+	if([files count]==1)
+	{
+		// convert image into TIFF so we can put it on the clipboard
+		// using the scrap manager
+		NSImage *theNSImage=[[NSImage alloc] initWithContentsOfFile:(NSString *)[files objectAtIndex:0]];
+		if(theNSImage)
+		{
+			NSData *theNSTIFFData=[theNSImage TIFFRepresentation];
+			if(theNSTIFFData)
+			{
+				[pboard setData:theNSTIFFData forType:NSTIFFPboardType];
+
+				[theNSImage release];
+			}
+		}
+	}
+	else
+	{
+		[pboard setData:[NSArchiver archivedDataWithRootObject:nativeData] forType:iMBNativePasteboardFlavor]; // Native iMB Data
+
+		[pboard writeURLs:nil files:files names:captions];
+
+		NSDictionary *plist = [NSDictionary dictionaryWithObjectsAndKeys:[NSArray arrayWithObject:album], @"List of Albums", images, @"Master Image List", nil];
+		[pboard setString:[plist description] forType:@"AlbumDataListPboardType"];
+		[pboard setString:[images description] forType:@"ImageDataListPboardType"];
+	}
 }
 
 - (void)writePlaylist:(iMBLibraryNode *)playlist toPasteboard:(NSPasteboard *)pboard
Index: iMBSafariBookmarkParser.m
--- iMBSafariBookmarkParser.m	2012-10-03 17:14:25.000000000 -0700
+++ iMBSafariBookmarkParser.m	2013-01-12 15:16:51.000000000 -0800
@@ -50,10 +50,19 @@
 #import "WebIconDatabase.h"
 #import "NSImage+iMedia.h"
 
+static int gInited=0;
+
 @implementation iMBSafariBookmarkParser
 
 + (void)load
 {
+/*
+	// [ed] 2/27/08 Can't perform this in the ObjC load method as we can't execute
+	// this code without properly handling the SolarMutex!!!
+	//
+	// Comment out and disabled the Safari loading in the delegate
+	
+
 	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
 	
 	// Force the shared instance to be build on main thread - some webkit versions
@@ -61,14 +70,32 @@
 	[WebIconDatabase performSelectorOnMainThread:@selector(sharedIconDatabase)
 									  withObject:nil
 								   waitUntilDone:YES];
-	
+*/
+
 	[iMediaConfiguration registerParser:[self class] forMediaType:@"links"];
 
+/*
 	[pool release];
+*/
 }
 
 - (id)init
 {
+	// [ed] 2/29/08 Add initialization here as when we create our first
+	// instance we'll be doing that on the main thread and have released
+	// all required locks to avoid deadlock with performSelector
+	
+	if(!gInited)
+	{
+		// Force the shared instance to be build on main thread - some webkit versions
+		// seem to complain when it's not the case
+	 
+		[WebIconDatabase performSelectorOnMainThread:@selector(sharedIconDatabase)
+										  withObject:nil
+									   waitUntilDone:YES];
+		gInited=1;
+	}
+
 	if (self = [super initWithContentsOfFile:[NSString stringWithFormat:@"%@/Library/Safari/Bookmarks.plist", NSHomeDirectory()]])
 	{
 		mySafariFaviconCache = [[NSMutableDictionary dictionary] retain];
Index: iMediaBrowse.xcodeproj/project.pbxproj
--- iMediaBrowse.xcodeproj/project.pbxproj	2012-10-03 17:14:21.000000000 -0700
+++ iMediaBrowse.xcodeproj/project.pbxproj	2013-05-21 21:18:02.000000000 -0700
@@ -108,6 +108,11 @@
 		A93A6A770AE77F2B00C77AA4 /* UKFileWatcher.m in Sources */ = {isa = PBXBuildFile; fileRef = A93A6A760AE77F2B00C77AA4 /* UKFileWatcher.m */; };
 		A9FECB070ADA696A00AB3426 /* iMBLibraryOutlineView.h in Headers */ = {isa = PBXBuildFile; fileRef = A9FECB050ADA696A00AB3426 /* iMBLibraryOutlineView.h */; };
 		A9FECB080ADA696A00AB3426 /* iMBLibraryOutlineView.m in Sources */ = {isa = PBXBuildFile; fileRef = A9FECB060ADA696A00AB3426 /* iMBLibraryOutlineView.m */; };
+		AC42E8200DA7D52500BCFCD5 /* iMBGalleryPicturesFolder.m in Sources */ = {isa = PBXBuildFile; fileRef = AC42E81F0DA7D52500BCFCD5 /* iMBGalleryPicturesFolder.m */; };
+		AC42E8270DA7DB1F00BCFCD5 /* gallery.png in Resources */ = {isa = PBXBuildFile; fileRef = AC42E8260DA7DB1F00BCFCD5 /* gallery.png */; };
+		AC42E82A0DA7DBD100BCFCD5 /* iMBGalleryPicturesFolder.h in Headers */ = {isa = PBXBuildFile; fileRef = AC42E8290DA7DBD100BCFCD5 /* iMBGalleryPicturesFolder.h */; };
+		AC42E8620DA7E1F200BCFCD5 /* iMBGalleryMusicFolder.h in Headers */ = {isa = PBXBuildFile; fileRef = AC42E8610DA7E1F200BCFCD5 /* iMBGalleryMusicFolder.h */; };
+		AC42E8750DA7E29700BCFCD5 /* iMBGalleryMusicFolder.m in Sources */ = {isa = PBXBuildFile; fileRef = AC42E8590DA7DEB400BCFCD5 /* iMBGalleryMusicFolder.m */; };
 		CE05E0C00DF74B84001D2356 /* i.tiff in Resources */ = {isa = PBXBuildFile; fileRef = CE05E0BD0DF74B84001D2356 /* i.tiff */; };
 		CE05E0C10DF74B84001D2356 /* i2.tiff in Resources */ = {isa = PBXBuildFile; fileRef = CE05E0BE0DF74B84001D2356 /* i2.tiff */; };
 		CE05E0C20DF74B84001D2356 /* iMedia.tiff in Resources */ = {isa = PBXBuildFile; fileRef = CE05E0BF0DF74B84001D2356 /* iMedia.tiff */; };
@@ -327,6 +332,9 @@
 		3C371AFC09AD501A00501C1F /* Framework Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = "Framework Debug.xcconfig"; sourceTree = "<group>"; };
 		3C371B0009AD502700501C1F /* Framework Release.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = "Framework Release.xcconfig"; sourceTree = "<group>"; };
 		3C3A131D09EAFB8100AF41BF /* en */ = {isa = PBXFileReference; fileEncoding = 10; lastKnownFileType = text.plist.strings; lineEnding = 0; name = en; path = en.lproj/Localizable.strings; sourceTree = "<group>"; };
+		3F909FFC0E8B47B8003424D9 /* es */ = {isa = PBXFileReference; lastKnownFileType = wrapper.nib; name = es; path = es.lproj/MediaBrowser.nib; sourceTree = "<group>"; };
+		3FCCD6910E8A8E1A00BD3616 /* es */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = es; path = ../../patches/imedia/additional_source/es.lproj/Localizable.strings; sourceTree = SOURCE_ROOT; };
+		3FCCD6930E8A8E9200BD3616 /* es */ = {isa = PBXFileReference; lastKnownFileType = text.html; name = es; path = ../../patches/imedia/additional_source/es.lproj/Info.html; sourceTree = SOURCE_ROOT; };
 		5B0628CF0AEDF38300419AEB /* sv */ = {isa = PBXFileReference; fileEncoding = 10; lastKnownFileType = text.plist.strings; lineEnding = 0; name = sv; path = sv.lproj/Localizable.strings; sourceTree = "<group>"; };
 		5B1AA7240D6C72CA003585CD /* MovieCache.xcdatamodel */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = wrapper.xcdatamodel; path = MovieCache.xcdatamodel; sourceTree = "<group>"; };
 		5B1AA7250D6C72CA003585CD /* movietool.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = movietool.m; sourceTree = "<group>"; };
@@ -344,7 +352,7 @@
 		7910D40A0A2C11C200094548 /* iMBMusicFolder.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; lineEnding = 0; path = iMBMusicFolder.h; sourceTree = "<group>"; };
 		7910D40B0A2C11C200094548 /* iMBMusicFolder.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = iMBMusicFolder.m; sourceTree = "<group>"; };
 		791679FE0975255000D9EF74 /* iMediaBrowser.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = iMediaBrowser.framework; sourceTree = BUILT_PRODUCTS_DIR; };
-		791679FF0975255000D9EF74 /* iMediaBrowser-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "iMediaBrowser-Info.plist"; sourceTree = "<group>"; };
+		791679FF0975255000D9EF74 /* iMediaBrowser-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.xml; path = "iMediaBrowser-Info.plist"; sourceTree = "<group>"; };
 		791F553E0A2C0BFC00D557F3 /* iMBFavouriteMoviesParser.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; lineEnding = 0; path = iMBFavouriteMoviesParser.h; sourceTree = "<group>"; };
 		791F553F0A2C0BFC00D557F3 /* iMBFavouriteMoviesParser.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = iMBFavouriteMoviesParser.m; sourceTree = "<group>"; };
 		791F55FB0A2C0E7000D557F3 /* iMBFavouriteMusicParser.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; lineEnding = 0; path = iMBFavouriteMusicParser.h; sourceTree = "<group>"; };
@@ -441,6 +449,14 @@
 		A93A6A760AE77F2B00C77AA4 /* UKFileWatcher.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = UKFileWatcher.m; sourceTree = "<group>"; };
 		A9FECB050ADA696A00AB3426 /* iMBLibraryOutlineView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; lineEnding = 0; path = iMBLibraryOutlineView.h; sourceTree = "<group>"; };
 		A9FECB060ADA696A00AB3426 /* iMBLibraryOutlineView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = iMBLibraryOutlineView.m; sourceTree = "<group>"; };
+		AC365F550DB2E2DE00EC59CA /* nl */ = {isa = PBXFileReference; lastKnownFileType = wrapper.nib; name = nl; path = nl.lproj/MediaBrowser.nib; sourceTree = "<group>"; };
+		AC365F570DB2E30C00EC59CA /* nl */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = nl; path = nl.lproj/Localizable.strings; sourceTree = "<group>"; };
+		AC42E81F0DA7D52500BCFCD5 /* iMBGalleryPicturesFolder.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = iMBGalleryPicturesFolder.m; sourceTree = "<group>"; };
+		AC42E8260DA7DB1F00BCFCD5 /* gallery.png */ = {isa = PBXFileReference; lastKnownFileType = image.png; path = gallery.png; sourceTree = SOURCE_ROOT; };
+		AC42E8290DA7DBD100BCFCD5 /* iMBGalleryPicturesFolder.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = iMBGalleryPicturesFolder.h; sourceTree = "<group>"; };
+		AC42E8590DA7DEB400BCFCD5 /* iMBGalleryMusicFolder.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = iMBGalleryMusicFolder.m; sourceTree = "<group>"; };
+		AC42E8610DA7E1F200BCFCD5 /* iMBGalleryMusicFolder.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = iMBGalleryMusicFolder.h; sourceTree = "<group>"; };
+		AC820EEA0DB6F6DC0021F9B7 /* nl */ = {isa = PBXFileReference; lastKnownFileType = text.html; name = nl; path = nl.lproj/Info.html; sourceTree = "<group>"; };
 		CE05E0BD0DF74B84001D2356 /* i.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = i.tiff; sourceTree = "<group>"; };
 		CE05E0BE0DF74B84001D2356 /* i2.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = i2.tiff; sourceTree = "<group>"; };
 		CE05E0BF0DF74B84001D2356 /* iMedia.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = iMedia.tiff; sourceTree = "<group>"; };
@@ -570,7 +586,7 @@
 		E5DF5B4C0D68B57B00E2FF8A /* AppDelegateSingle.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AppDelegateSingle.h; sourceTree = "<group>"; };
 		E5DF5B4D0D68B57B00E2FF8A /* AppDelegateSingle.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = AppDelegateSingle.m; sourceTree = "<group>"; };
 		E5DF5D160D68C03000E2FF8A /* iMediaTesterSingle.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = iMediaTesterSingle.app; sourceTree = BUILT_PRODUCTS_DIR; };
-		E5DF5D180D68C03100E2FF8A /* InfoSingle.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = InfoSingle.plist; sourceTree = "<group>"; };
+		E5DF5D180D68C03100E2FF8A /* InfoSingle.plist */ = {isa = PBXFileReference; lastKnownFileType = text.xml; path = InfoSingle.plist; sourceTree = "<group>"; };
 		FC6810360B1771ED0063CF05 /* iMBAperturePhotosParser.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; lineEnding = 0; path = iMBAperturePhotosParser.h; sourceTree = "<group>"; };
 		FC6810370B1771ED0063CF05 /* iMBAperturePhotosParser.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; lineEnding = 0; path = iMBAperturePhotosParser.m; sourceTree = "<group>"; };
 		FD0220B40D8F19DC00B48AAB /* sv */ = {isa = PBXFileReference; lastKnownFileType = wrapper.nib; name = sv; path = sv.lproj/MainMenu.nib; sourceTree = "<group>"; };
@@ -809,6 +825,8 @@
 		7953E6450A2E896700C7AFBB /* Photo */ = {
 			isa = PBXGroup;
 			children = (
+				AC42E81F0DA7D52500BCFCD5 /* iMBGalleryPicturesFolder.m */,
+				AC42E8290DA7DBD100BCFCD5 /* iMBGalleryPicturesFolder.h */,
 				FC6810360B1771ED0063CF05 /* iMBAperturePhotosParser.h */,
 				FC6810370B1771ED0063CF05 /* iMBAperturePhotosParser.m */,
 				795D715F09D3AB55005F166D /* iMBiPhotoPhotosParser.h */,
@@ -852,6 +870,8 @@
 				79430F1B0A2C2C88009E0FC7 /* iMBiMovieSoundEffectsParser.m */,
 				CE11017C0B69080B00783570 /* iMBLibrarySoundsParser.h */,
 				CE11017D0B69080B00783570 /* iMBLibrarySoundsParser.m */,
+				AC42E8590DA7DEB400BCFCD5 /* iMBGalleryMusicFolder.m */,
+				AC42E8610DA7E1F200BCFCD5 /* iMBGalleryMusicFolder.h */,
 			);
 			name = Audio;
 			sourceTree = "<group>";
@@ -974,6 +994,7 @@
 		968BEF3E090E904100D00E5C /* images */ = {
 			isa = PBXGroup;
 			children = (
+				AC42E8260DA7DB1F00BCFCD5 /* gallery.png */,
 				CE05E0DE0DF74B96001D2356 /* larger.png */,
 				CE05E1010DF74B96001D2356 /* smaller.png */,
 				CE05E1450DF74BB1001D2356 /* spotlight.gif */,
@@ -1218,6 +1239,9 @@
 				E549259E0D53418D002B9F89 /* iMediaConfiguration.h in Headers */,
 				5B29F47C0D6EB38B0045CD86 /* iMBMovieReference.h in Headers */,
 				5B29F47D0D6EB38C0045CD86 /* iMBMovieCacheDB.h in Headers */,
+				AC42E82A0DA7DBD100BCFCD5 /* iMBGalleryPicturesFolder.h in Headers */,
+				AC42E8620DA7E1F200BCFCD5 /* iMBGalleryMusicFolder.h in Headers */,
+				5B29F47D0D6EB38C0045CD86 /* iMBMovieCacheDB.h in Headers */,
 				CEEE54150DAC30EF00B7F6A2 /* iMBVerticallyAlignedTextCell.h in Headers */,
 				79F4DC4B0E1AC1630001C072 /* iMedia.pch in Headers */,
 				FDE557E70E22C386007E4706 /* iMBParserController.h in Headers */,
@@ -1344,6 +1368,8 @@
 				it,
 				zh_CN,
 				sv,
+				nl,
+				es,
 			);
 			mainGroup = 29B97314FDCFA39411CA2CEA /* iMediaBrowse */;
 			projectDirPath = "";
@@ -1375,6 +1401,7 @@
 				FD6008F20D6A552000A1146F /* MediaBrowser.nib in Resources */,
 				E541A96D0D3539740056AEC5 /* Abstract.nib in Resources */,
 				5B1AA7310D6C72CA003585CD /* minimovie.atomdata in Resources */,
+				AC42E8270DA7DB1F00BCFCD5 /* gallery.png in Resources */,
 				CE05E0C00DF74B84001D2356 /* i.tiff in Resources */,
 				CE05E0C10DF74B84001D2356 /* i2.tiff in Resources */,
 				CE05E0C20DF74B84001D2356 /* iMedia.tiff in Resources */,
@@ -1458,7 +1485,6 @@
 			runOnlyForDeploymentPostprocessing = 1;
 			shellPath = /bin/sh;
 			shellScript = "\n# see Comments for information on this script\n\necho \"Generating Localizable.strings ...\"\n\ncd ${SRCROOT}\ngenstrings -littleEndian -q -u -s LocalizedStringInIMedia -o en.lproj *.m\n\n";
-			showEnvVarsInLog = 0;
 		};
 /* End PBXShellScriptBuildPhase section */
 
@@ -1544,6 +1570,8 @@
 				5B1AA72B0D6C72CA003585CD /* MovieCache.xcdatamodel in Sources */,
 				5B29F2850D6D726F0045CD86 /* iMBMovieCacheDB.m in Sources */,
 				5B29F28A0D6D72960045CD86 /* iMBMovieReference.m in Sources */,
+				AC42E8200DA7D52500BCFCD5 /* iMBGalleryPicturesFolder.m in Sources */,
+				AC42E8750DA7E29700BCFCD5 /* iMBGalleryMusicFolder.m in Sources */,
 				CEEE54160DAC30EF00B7F6A2 /* iMBVerticallyAlignedTextCell.m in Sources */,
 				FDE557E80E22C386007E4706 /* iMBParserController.m in Sources */,
 				FDD974F50E23EA9800C2A092 /* iMBPhotoFolderParser.m in Sources */,
@@ -1617,6 +1645,8 @@
 				CE1AD3860A7E83F20083C01E /* it */,
 				CE55A6A10AD194C70091C8AE /* zh_CN */,
 				5B0628CF0AEDF38300419AEB /* sv */,
+				AC365F570DB2E30C00EC59CA /* nl */,
+				3FCCD6910E8A8E1A00BD3616 /* es */,
 			);
 			name = Localizable.strings;
 			sourceTree = "<group>";
@@ -1649,6 +1679,8 @@
 				CE4E790D0C5E77120044A5F9 /* sv */,
 				CE4E790E0C5E77170044A5F9 /* zh_CN */,
 				CE4E790F0C5E771C0044A5F9 /* zh_TW */,
+				AC820EEA0DB6F6DC0021F9B7 /* nl */,
+				3FCCD6930E8A8E9200BD3616 /* es */,
 			);
 			name = Info.html;
 			sourceTree = "<group>";
@@ -1665,6 +1697,8 @@
 				FD0220CC0D8F1A5100B48AAB /* de */,
 				FD0220CD0D8F1A5100B48AAB /* fr */,
 				CE2A55000E1DDE3200AC9DE2 /* zh_TW */,
+				AC365F550DB2E2DE00EC59CA /* nl */,
+				3F909FFC0E8B47B8003424D9 /* es */,
 			);
 			name = MediaBrowser.nib;
 			sourceTree = "<group>";
@@ -1740,6 +1774,7 @@
 				);
 				PRODUCT_NAME = iMediaBrowser;
 				SKIP_INSTALL = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -1772,7 +1807,10 @@
 		969656A208C6A24500F2F85C /* Debug */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
-				ARCHS = "$(NATIVE_ARCH)";
+				ARCHS = (
+					i386,
+					x86_64,
+				);
 				COPY_PHASE_STRIP = NO;
 				GCC_DYNAMIC_NO_PIC = NO;
 				GCC_ENABLE_FIX_AND_CONTINUE = YES;
@@ -1830,8 +1868,6 @@
 			buildSettings = {
 				GCC_WARN_CHECK_SWITCH_STATEMENTS = YES;
 				GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;
-				MACOSX_DEPLOYMENT_TARGET = 10.4;
-				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
 			};
 			name = Debug;
 		};
@@ -1840,12 +1876,10 @@
 			buildSettings = {
 				ARCHS = (
 					i386,
-					ppc,
+					x86_64,
 				);
 				GCC_WARN_CHECK_SWITCH_STATEMENTS = YES;
 				GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;
-				MACOSX_DEPLOYMENT_TARGET = 10.4;
-				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
 			};
 			name = Release;
 		};
@@ -1878,8 +1912,8 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ARCHS = (
-					ppc,
 					i386,
+					x86_64,
 				);
 				COPY_PHASE_STRIP = YES;
 				GCC_ENABLE_FIX_AND_CONTINUE = NO;
@@ -1910,15 +1944,16 @@
 			buildSettings = {
 				GCC_WARN_CHECK_SWITCH_STATEMENTS = YES;
 				GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;
-				MACOSX_DEPLOYMENT_TARGET = 10.4;
-				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
 			};
 			name = Plugin;
 		};
 		E5DF5D130D68C03000E2FF8A /* Debug */ = {
 			isa = XCBuildConfiguration;
 			buildSettings = {
-				ARCHS = "$(NATIVE_ARCH)";
+				ARCHS = (
+					i386,
+					x86_64,
+				);
 				COPY_PHASE_STRIP = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -1944,7 +1979,6 @@
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_2 = "\"$(SRCROOT)/sqlite\"";
 				PREBINDING = NO;
 				PRODUCT_NAME = iMediaTesterSingle;
-				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
 				WRAPPER_EXTENSION = app;
 				ZERO_LINK = NO;
 			};
@@ -1954,8 +1988,8 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ARCHS = (
-					ppc,
 					i386,
+					x86_64,
 				);
 				COPY_PHASE_STRIP = YES;
 				FRAMEWORK_SEARCH_PATHS = (
@@ -1979,7 +2013,6 @@
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(SRCROOT)/sqlite\"";
 				PREBINDING = NO;
 				PRODUCT_NAME = iMediaTesterSingle;
-				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
 				WRAPPER_EXTENSION = app;
 				ZERO_LINK = NO;
 			};
@@ -1989,8 +2022,8 @@
 			isa = XCBuildConfiguration;
 			buildSettings = {
 				ARCHS = (
-					ppc,
 					i386,
+					x86_64,
 				);
 				COPY_PHASE_STRIP = YES;
 				FRAMEWORK_SEARCH_PATHS = (
@@ -2014,7 +2047,6 @@
 				LIBRARY_SEARCH_PATHS_QUOTED_FOR_TARGET_1 = "\"$(SRCROOT)/sqlite\"";
 				PREBINDING = NO;
 				PRODUCT_NAME = iMediaTesterSingle;
-				SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;
 				WRAPPER_EXTENSION = app;
 				ZERO_LINK = NO;
 			};
@@ -2040,7 +2072,7 @@
 				);
 				PREBINDING = NO;
 				PRODUCT_NAME = MetadataTool;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Debug;
 		};
@@ -2083,7 +2115,7 @@
 				);
 				PREBINDING = NO;
 				PRODUCT_NAME = MetadataTool;
-				ZERO_LINK = YES;
+				ZERO_LINK = NO;
 			};
 			name = Plugin;
 		};
Index: iMediaBrowser.h
--- iMediaBrowser.h	2012-10-03 17:14:25.000000000 -0700
+++ iMediaBrowser.h	2013-01-12 15:16:51.000000000 -0800
@@ -48,7 +48,7 @@
 @protocol iMediaBrowser;
 @class iMBLibraryNode, RBSplitView, iMBBackgroundImageView;
 
-@interface iMediaBrowser : NSWindowController
+@interface iMediaBrowser : NSWindowController <NSWindowDelegate, NSToolbarDelegate>
 {
 	IBOutlet id						myDelegate;
 	IBOutlet NSTabView				*browserTabView;
Index: iMediaBrowser.m
--- iMediaBrowser.m	2012-10-03 17:14:25.000000000 -0700
+++ iMediaBrowser.m	2013-01-12 15:16:51.000000000 -0800
@@ -57,6 +57,12 @@
 static iMediaBrowser *_sharedMediaBrowser = nil;
 static NSMutableArray *_browserClasses = nil;
 
+static NSString *kMediaBrowserXPosPref = @"iMBXPos";
+static NSString *kMediaBrowserYPosPref = @"iMBYPos";
+static NSString *kMediaBrowserWidthPref = @"iMBWidth";
+static NSString *kMediaBrowserHeightPref = @"iMBHeight";
+static NSString *kMediaBrowserVisiblePref = @"iMBVisible";
+
 @interface iMediaBrowser (PrivateAPI)
 - (void)setupInfoWindow;
 + (NSArray *)findModulesInDirectory:(NSString*)scanDir withExtension:(NSString *)ext;
@@ -435,7 +441,7 @@
 	[container addSubview:iButton];
 	
 	// get flipping window ready
-	[NSWindow flippingWindow];
+	[NSWindow flippingWindow_iMediaBrowse];
 	[oInfoTextView setDrawsBackground:NO];
 	//[oInfoTextView setTextContainerInset:NSMakeSize(2,2)];
 	NSScrollView *scrollView = [oInfoTextView enclosingScrollView];
@@ -609,7 +615,7 @@
     return [[iMediaConfiguration sharedConfiguration] prefersFilenamesInPhotoBasedBrowsers];
 }
 
-- (IBAction)showWindow:(id)sender;
+- (IBAction)showWindow:(id)sender
 {
 	// If we are actually showing the back of the window, flip to the front.
 	if ([oInfoWindow isVisible])
@@ -618,10 +624,61 @@
 	}
 	else
 	{
+		NSWindow *window = [self window];
+		if(window && ![window isVisible])
+		{
+			// Check for retained user position. If not available, make relative
+			// to the key frame.
+			NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
+			NSPoint windowPos={0, 0};
+			NSString *xPosStr=[defaults stringForKey:kMediaBrowserXPosPref];
+			NSString *yPosStr=[defaults stringForKey:kMediaBrowserYPosPref];
+			if(xPosStr && yPosStr)
+			{
+				windowPos.x=[xPosStr intValue];
+				windowPos.y=[yPosStr intValue];
+			}
+			else
+			{
+				NSWindow *keyWindow=[NSApp mainWindow];
+				if(keyWindow)
+				{
+					windowPos=[keyWindow frame].origin;
+					windowPos.x+=75;
+					windowPos.y+=75;
+				}
+			}
+			[window setFrameOrigin:windowPos];
+
+			NSString *widthStr=[defaults stringForKey:kMediaBrowserWidthPref];
+			NSString *heightStr=[defaults stringForKey:kMediaBrowserHeightPref];
+			if(widthStr && heightStr)
+			{
+				NSSize contentSize={0, 0};
+				contentSize.width=[widthStr intValue];
+				contentSize.height=[heightStr intValue];
+				[window setContentSize:contentSize];
+			}
+		}
+
 		[super showWindow:sender];
+
+		if(window && [window isVisible])
+		{
+			NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
+			[defaults setBool:YES forKey:kMediaBrowserVisiblePref];
+			[defaults synchronize];
+		}
 	}
 }
 
+- (IBAction)showWindowOnlyIfVisible:(id)sender
+{
+	NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
+	if([defaults boolForKey:kMediaBrowserVisiblePref])
+		[self showWindow:sender];
+}
+
 - (BOOL)infoWindowIsVisible
 {
 	return [oInfoWindow isVisible];
@@ -635,13 +692,13 @@
 - (IBAction) info:(id)sender
 {
 	[oInfoWindow setFrame:[[self window] frame] display:NO];
-	[[self window] flipToShowWindow:oInfoWindow forward:YES reflectInto:oBackgroundImageView];
+	[[self window] flipToShowWindow_iMediaBrowse:oInfoWindow forward:YES reflectInto:oBackgroundImageView];
 }
 
 - (IBAction) flipBack:(id)sender
 {
 	[[self window] setFrame:[oInfoWindow frame] display:NO];	// not really needed unless window is resized
-	[oInfoWindow flipToShowWindow:[self window] forward:NO reflectInto:nil];
+	[oInfoWindow flipToShowWindow_iMediaBrowse:[self window] forward:NO reflectInto:nil];
 }
 
 - (NSArray *)excludedFolders {
@@ -708,9 +765,47 @@
 
 #pragma mark -
 #pragma mark Window Delegate Methods
+- (void)windowDidMove:(NSNotification *)aNotification
+{
+	NSWindow *window=[aNotification object];
+	if(window && (window==[self window]))
+	{
+		NSPoint windowPos=[window frame].origin;
+		NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
+		[defaults setObject:[NSString stringWithFormat:@"%d", (int)windowPos.x] forKey:kMediaBrowserXPosPref]; 
+		[defaults setObject:[NSString stringWithFormat:@"%d", (int)windowPos.y] forKey:kMediaBrowserYPosPref];
+		[defaults synchronize];
+	}
+}
+
+- (void)windowDidResize:(NSNotification *)aNotification
+{
+	NSWindow *window=[aNotification object];
+	if(window && (window==[self window]))
+	{
+		NSView *pContentView=[window contentView];
+		if(pContentView)
+		{
+			NSSize contentSize=[pContentView frame].size;
+			NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
+			[defaults setObject:[NSString stringWithFormat:@"%d", (int)contentSize.width] forKey:kMediaBrowserWidthPref]; 
+			[defaults setObject:[NSString stringWithFormat:@"%d", (int)contentSize.height] forKey:kMediaBrowserHeightPref];
+			[defaults synchronize];
+		}
+	}
+}
+
 - (void)windowWillClose:(NSNotification *)aNotification
 {
 	[mySelectedBrowser didDeactivate];
+
+	NSWindow *window=[aNotification object];
+	if(window && (window==[self window]))
+	{
+		NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
+		[defaults setBool:NO forKey:kMediaBrowserVisiblePref];
+		[defaults synchronize];
+	}
 }
 
 - (void)windowDidBecomeKey:(NSNotification *)aNotification
@@ -1005,4 +1100,4 @@
 	return bundles;
 }
 
-@end
\ No newline at end of file
+@end
