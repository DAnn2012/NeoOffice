Index: inc/salnativewidgets.hxx
===================================================================
RCS file: /cvs/gsl/vcl/inc/salnativewidgets.hxx,v
retrieving revision 1.9
diff -u -r1.9 salnativewidgets.hxx
--- inc/salnativewidgets.hxx	19 Jun 2006 19:07:59 -0000	1.9
+++ inc/salnativewidgets.hxx	21 Nov 2006 18:10:36 -0000
@@ -138,6 +138,15 @@
 // tool tips
 #define CTRL_TOOLTIP            140
 
+// progress bars
+#define CTRL_PROGRESSBAR		150
+
+// hierarchical tree control expand/collapse handle
+#define CTRL_DISCLOSUREBTN		160
+
+// list view header cell appearing above columns in lists
+#define CTRL_LISTVIEWHEADER		170
+
 /* Control Parts:
  *
  *   Uniquely identify a part of a control,
@@ -163,6 +172,7 @@
 #define PART_MENU_ITEM              250
 #define PART_MENU_ITEM_CHECK_MARK   251
 #define PART_MENU_ITEM_RADIO_MARK   252
+#define PART_LISTVIEWHEADER_SORT_MARK	150	// used for list view headers to indicate whether they draw an ascending/descending sort indicator or whether VCL should handle the indicator
 
 /** The edit field part of a control, e.g. of the combo box.
 
@@ -340,6 +350,79 @@
     int             maTopDockingAreaHeight;
 };
 
+/*  ProgressbarValue:
+ *
+ *  Value container for progressbars indicating task completion
+ */
+class ProgressbarValue
+{
+	public:
+		BOOL	mbIndeterminate;	// indcates if the progress bar is indeterminate (unknown action length) or determinate (able to determine completion)
+		double	mdPercentComplete;	// percentage in range [0.0, 100.0], only used for determinate progress bars
+		
+		ProgressbarValue()
+			{
+				mbIndeterminate = FALSE;
+				mdPercentComplete = 0;
+			};
+		
+		~ProgressbarValue() {};
+};
+
+#define DISCLOSUREBTN_CLOSED	0		// group for this control is currently closed, displaying the container only
+#define DISCLOSUREBTN_OPEN		1		// group for this control is currently expanded, displaying all elements within the container
+
+#define DISCLOSUREBTN_ALIGN_LEFT	0	// disclosure controls appear to the left of any items in the left margin of the column
+#define DISCLOSUREBTN_ALIGN_RIGHT	1	// disclosure contorls appear to the right of any items in the right margin of the column
+
+/*	DisclosureBtnValue:
+ *
+ *	Value container for disclosure buttons used for control of expanding/collapsing
+ *	tree views
+ */
+class DisclosureBtnValue
+{
+	public:
+		USHORT mnOpenCloseState;		// indicates whether the controls associated container is open or closed, DISCLOSURE_OPEN/CLOSED
+		USHORT mnAlignment;				// indicates whether the disclosure control appears to the left or right of containers
+		BOOL mbHasChildren;				// true if the node has any children, false if not
+		
+		DisclosureBtnValue()
+			{
+				mnOpenCloseState = DISCLOSUREBTN_CLOSED;
+				mnAlignment = DISCLOSUREBTN_ALIGN_LEFT;
+				mbHasChildren = 1;
+			};
+		
+		~DisclosureBtnValue() {};
+};
+
+#define LISTVIEWHEADER_SORT_DONTKNOW	0	// indicates the current sort of the column is unknown
+#define LISTVIEWHEADER_SORT_DESCENDING	1	// indicates the column is sorted in descending order
+#define LISTVIEWHEADER_SORT_ASCENDING	2	// indicates the column is sorted in ascending order
+#define LISTVIEWHEADER_SORT_UNSORTED	3	// indicates the column is not sorted
+
+/*	ListViewHeaderValue
+ *
+ *	Value container for list view header cells drawn above columns of scrollable
+ *	lists.  Indicates whether the clumn is the primary sort column and
+ *	any direction of the sort
+ */
+class ListViewHeaderValue
+{
+	public:
+		BOOL mbPrimarySortColumn;		// true if the column is the primary active column on which data is sorted, false if it is a secondary informational column
+		USHORT mnSortDirection;			// sort direction for the column.
+		
+		ListViewHeaderValue()
+			{
+				mbPrimarySortColumn = FALSE;
+				mnSortDirection = LISTVIEWHEADER_SORT_DONTKNOW;
+			};
+		
+		~ListViewHeaderValue() {};
+};
+
 /* ImplControlValue:
  *
  *   Generic value container for all control parts.
