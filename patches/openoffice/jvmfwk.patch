Index: plugins/sunmajor/pluginlib/makefile.mk
===================================================================
RCS file: /cvs/udk/jvmfwk/plugins/sunmajor/pluginlib/makefile.mk,v
retrieving revision 1.9
diff -u -r1.9 makefile.mk
--- plugins/sunmajor/pluginlib/makefile.mk	24 May 2006 13:53:48 -0000	1.9
+++ plugins/sunmajor/pluginlib/makefile.mk	21 Nov 2006 18:00:40 -0000
@@ -51,6 +51,11 @@
 
 # ------------------------------------------------------------------
 
+# turn off optimizations on MACOSX due to optimization errors in gcc 4.0.1
+.IF "$(OS)" == "MACOSX"
+CDEFS+=-O0
+.ENDIF
+
 #.INCLUDE :  ..$/cppumaker.mk
 .IF "$(SOLAR_JAVA)"!=""
 
Index: source/makefile.mk
===================================================================
RCS file: /cvs/udk/jvmfwk/source/makefile.mk,v
retrieving revision 1.9
diff -u -r1.9 makefile.mk
--- source/makefile.mk	7 Sep 2005 19:36:34 -0000	1.9
+++ source/makefile.mk	21 Nov 2006 18:00:40 -0000
@@ -61,6 +61,11 @@
 
 #LIB1TARGET=$(SLB)$/$(FRAMEWORKLIB).lib
 
+# turn off optimizations on MACOSX due to optimization errors in gcc 4.0.1
+.IF "$(OS)" == "MACOSX"
+CDEFS+=-O0
+.ENDIF
+
 .IF "$(UNIXVERSIONNAMES)" == ""
 SHL1TARGET = $(FRAMEWORKLIB)$(UDK_MAJOR)
 .ELSE # UNIXVERSIONNAMES
--- plugins/sunmajor/pluginlib/otherjre.cxx	2009-02-03 04:49:02.000000000 -0800
+++ plugins/sunmajor/pluginlib/otherjre.cxx	2012-07-12 21:02:15.000000000 -0700
@@ -34,6 +34,22 @@
 #include "osl/thread.h"
 #include "otherjre.hxx"
 
+#ifdef MACOSX
+
+#include <dlfcn.h>
+#include "sunversion.hxx"
+#include "diagnostics.h"
+
+#include <premac.h>
+#include <CoreServices/CoreServices.h>
+#include <postmac.h>
+
+#define OUSTR(x) ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(x) )
+
+typedef OSErr Gestalt_Type( OSType selector, SInt32 *response );
+
+#endif	// MACOSX
+
 using namespace rtl;
 using namespace std;
 
@@ -72,7 +88,9 @@
 	"/bin/jrockit/jvm.dll"
 #elif UNX
 #ifdef MACOSX
-        "/../../../JavaVM"
+        // Fix bug 1257 by explicitly loading the JVM instead of loading the
+        // shared JavaVM library
+        "/../Libraries/libserver.dylib"
 #else
         "/lib/" JFW_PLUGIN_ARCH "/client/libjvm.so", // for Blackdown PPC
         "/lib/" JFW_PLUGIN_ARCH "/server/libjvm.so", // for Blackdown AMD64
@@ -118,13 +136,81 @@
 #endif
 }
 
+#ifdef MACOSX
+int OtherInfo::compareVersions(const rtl::OUString& sSecond) const
+#else	// MACOSX
 int OtherInfo::compareVersions(const rtl::OUString& /*sSecond*/) const
+#endif	// MACOSX
 {
+#ifdef MACOSX
+    OUString sFirst = getVersion();
+      
+    SunVersion version1(sFirst);
+    JFW_ENSURE(version1, OUSTR("[Java framework] sunjavaplugin"SAL_DLLEXTENSION
+                               " does not know the version: ")
+               + sFirst + OUSTR(" as valid for a SUN JRE."));
+    // If we are running Leopard, don't allow loading of any JVM earlier than
+    // Java 1.5.0
+    static bool initializedOnce = false;
+    static bool isLaterThanLeopard = false;
+    static bool isLeopard = false;
+    if ( ! initializedOnce )
+    {
+        void *pLib = dlopen( NULL, RTLD_LAZY | RTLD_LOCAL );
+        if ( pLib )
+        {
+            Gestalt_Type *pGestalt = (Gestalt_Type *)dlsym( pLib, "Gestalt" );
+            if ( pGestalt )
+            {
+                SInt32 res = 0;
+                pGestalt( gestaltSystemVersionMajor, &res );
+                if ( res == 10 )
+                {
+                    res = 0;
+                    pGestalt( gestaltSystemVersionMinor, &res );
+                    if ( res > 5 )
+                        isLaterThanLeopard = true;
+                    else if ( res ==  5 )
+                        isLeopard = true;
+                }
+                else
+                {
+                    isLaterThanLeopard = true;
+                }
+            }
+
+            dlclose( pLib );
+        }
+
+        initializedOnce = true;
+    }
+
+    // Only run Java 1.5.x on Leopard as Java 1.4.x is crashy and Java 1.6.x
+	// will hang on anything before Snow Leopard
+    if ( isLaterThanLeopard && version1 < SunVersion( ::rtl::OUString::createFromAscii( "1.6.0" ) ) )
+        return -1;
+    else if ( !isLaterThanLeopard && version1 > SunVersion( ::rtl::OUString::createFromAscii( "1.5.999" ) ) )
+        return -1;
+    else if ( isLeopard && version1 < SunVersion( ::rtl::OUString::createFromAscii( "1.5.0" ) ) )
+        return -1;
+
+    SunVersion version2(sSecond);
+    if ( ! version2)
+        throw MalformedVersionException(); 
+ 
+    if(version1 == version2)
+        return 0;
+    if(version1 > version2)
+        return 1;
+    else
+        return -1;
+#else	// MACOSX
     //Need to provide an own algorithm for comparing version. 
     //Because this function returns always 0, which means the version of
     //this JRE and the provided version "sSecond" are equal, one cannot put
     //any excludeVersion entries in the javavendors.xml file.
     return 0;
+#endif	// MACOSX
 }
 
 }
--- plugins/sunmajor/pluginlib/sunjavaplugin.cxx	2008-07-01 16:14:03.000000000 -0700
+++ plugins/sunmajor/pluginlib/sunjavaplugin.cxx	2012-07-12 21:03:44.000000000 -0700
@@ -494,7 +494,13 @@
     typedef jint JNICALL JNI_InitArgs_Type(void *);
     typedef jint JNICALL JNI_CreateVM_Type(JavaVM **, JNIEnv **, void *);
     rtl::OUString sSymbolCreateJava(
+#ifdef MACOSX
+            // Fix bug 1257 by explicitly loading the JVM instead of loading the
+            // shared JavaVM library
+            RTL_CONSTASCII_USTRINGPARAM("JNI_CreateJavaVM_Impl"));
+#else	// MACOSX
             RTL_CONSTASCII_USTRINGPARAM("JNI_CreateJavaVM"));
+#endif	// MACOSX
         
     JNI_CreateVM_Type * pCreateJavaVM = (JNI_CreateVM_Type *) osl_getFunctionSymbol(
         moduleRt, sSymbolCreateJava.pData);
--- plugins/sunmajor/pluginlib/util.cxx	2009-06-10 02:16:43.000000000 -0700
+++ plugins/sunmajor/pluginlib/util.cxx	2012-07-12 21:02:41.000000000 -0700
@@ -103,7 +103,10 @@
 char const *g_arSearchPaths[] = {
 #ifdef MACOSX
     "",
-    "System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/"
+    "System/Library/Frameworks/JavaVM.framework/Versions/1.6.1/",
+    "System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/",
+    "System/Library/Frameworks/JavaVM.framework/Versions/1.5.1/",
+    "System/Library/Frameworks/JavaVM.framework/Versions/1.5.0/"
 #else
     "",
     "usr/",
