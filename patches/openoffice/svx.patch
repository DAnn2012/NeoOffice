--- ./inc/svx/tbcontrl.hxx	2008-04-10 13:42:37.000000000 -0700
+++ ./inc/svx/tbcontrl.hxx	2015-08-04 22:28:59.000000000 -0700
@@ -162,6 +162,7 @@
 #include <sfx2/tbxctrl.hxx>
 #include <svx/strarray.hxx>
 #include "svx/svxdllapi.h"
+#include <svx/boxitem.hxx>
 
 #include <com/sun/star/awt/FontDescriptor.hpp>
 
@@ -289,6 +290,7 @@
 class SVX_DLLPUBLIC SvxFontColorToolBoxControl : public SfxToolBoxControl
 {
     ::svx::ToolboxButtonColorUpdater*   pBtnUpdater;
+    Color                               aCurColor;
 
 public:
 	SFX_DECL_TOOLBOX_CONTROL();
@@ -299,6 +301,8 @@
 											  const SfxPoolItem* pState );
 	virtual SfxPopupWindowType	GetPopupWindowType() const;
 	virtual SfxPopupWindow*		CreatePopupWindow();
+	virtual void				Select( BOOL bMod1 = FALSE );
+	DECL_LINK( ColorChangedHdl, Color * );
 };
 
 
@@ -316,6 +320,7 @@
 
 	//	SfxStatusForwarder 			aForward;
     ::svx::ToolboxButtonColorUpdater*   pBtnUpdater;
+    Color                               aCurColor;
 
 public:
 	SFX_DECL_TOOLBOX_CONTROL();
@@ -340,6 +345,7 @@
 class SVX_DLLPUBLIC SvxColorToolBoxControl : public SfxToolBoxControl
 {
     ::svx::ToolboxButtonColorUpdater*   pBtnUpdater;
+    Color                               aCurColor;
 public:
 	SFX_DECL_TOOLBOX_CONTROL();
 	SvxColorToolBoxControl( USHORT nSlotId, USHORT nId, ToolBox& rTbx );
@@ -349,6 +355,8 @@
 											  const SfxPoolItem* pState );
 	virtual SfxPopupWindowType	GetPopupWindowType() const;
 	virtual SfxPopupWindow*		CreatePopupWindow();
+	virtual void				Select( BOOL bMod1 = FALSE );
+	DECL_LINK( ColorChangedHdl, Color * );
 };
 
 
@@ -358,8 +366,12 @@
 //========================================================================
 
 
+class SvxFrameWindowState_Impl;
+
 class SVX_DLLPUBLIC SvxFrameToolBoxControl : public SfxToolBoxControl
 {
+    SvxBoxItem                          aCurBorderOuter;
+    SvxBoxInfoItem                      aCurBorderInner;
 public:
 	SFX_DECL_TOOLBOX_CONTROL();
 	SvxFrameToolBoxControl( USHORT nSlotId, USHORT nId, ToolBox& rTbx );
@@ -368,7 +380,8 @@
 	virtual SfxPopupWindow*		CreatePopupWindow();
 	virtual void				StateChanged( USHORT nSID, SfxItemState eState,
 											  const SfxPoolItem* pState );
-
+	virtual void				Select( BOOL bMod1 = FALSE );
+	DECL_LINK( BorderChangedHdl, SvxFrameWindowState_Impl * );
 };
 
 
--- ./source/tbxctrls/colorwindow.hxx	2008-04-10 20:34:47.000000000 -0700
+++ ./source/tbxctrls/colorwindow.hxx	2015-08-04 22:35:39.000000000 -0700
@@ -9,6 +9,8 @@
 #include <rtl/ustring.hxx>
 #include <com/sun/star/frame/XFrame.hpp>
 
+#include <map>
+
 //========================================================================
 // class SvxColorWindow_Impl --------------------------------------------------
 //========================================================================
@@ -21,6 +23,8 @@
 	const USHORT	                                                    theSlotId;
 	ValueSet		                                                    aColorSet;
     rtl::OUString                                                       maCommand;
+    std::map< ColorData, USHORT >                                       maColorSetMap;
+    Link                                                                maColorChangedHdl;
 
 #if _SOLAR__PRIVATE
 	DECL_LINK( SelectHdl, void * );
@@ -43,6 +47,8 @@
     virtual void        StateChanged( USHORT nSID, SfxItemState eState, const SfxPoolItem* pState );
 
 	virtual SfxPopupWindow* Clone() const;
+
+    void                SetColorChangedHdl( const Link& rLink ) { maColorChangedHdl = rLink; }
 };
 
 #endif
--- ./source/tbxctrls/tbcontrl.cxx	2008-11-10 08:06:12.000000000 -0800
+++ ./source/tbxctrls/tbcontrl.cxx	2015-08-04 22:31:59.000000000 -0700
@@ -248,6 +248,16 @@
 	ValueSet::MouseButtonUp(rMEvt);
 }
 
+class SAL_DLLPRIVATE SvxFrameWindowState_Impl
+{
+public:
+	const SvxBoxItem		maBorderOuter;
+	const SvxBoxInfoItem	maBorderInner;
+
+							SvxFrameWindowState_Impl( SvxBoxItem& rBorderOuter, SvxBoxInfoItem& rBorderInner ) : maBorderOuter( rBorderOuter ), maBorderInner( rBorderInner ) {}
+							~SvxFrameWindowState_Impl() {}
+};
+
 class SvxFrameWindow_Impl : public SfxPopupWindow
 {
 	using FloatingWindow::StateChanged;
@@ -256,6 +266,7 @@
     SvxFrmValueSet_Impl  aFrameSet;
 	ImageList 		aImgList;
     sal_Bool        bParagraphMode;
+    Link            maBorderChangedHdl;
 
 #if _SOLAR__PRIVATE
 	DECL_LINK( SelectHdl, void * );
@@ -278,6 +289,7 @@
 	virtual void	DataChanged( const DataChangedEvent& rDCEvt );
 
 	inline BOOL		IsHighContrast( void ) const;
+	void			SetBorderChangedHdl( const Link& rLink ) { maBorderChangedHdl = rLink; }
 };
 
 inline BOOL SvxFrameWindow_Impl::IsHighContrast( void ) const
@@ -891,8 +903,15 @@
 		{
 			pEntry = pColorTable->GetColor(i);
 			aColorSet.InsertItem( i+1, pEntry->GetColor(), pEntry->GetName() );
+			maColorSetMap[ pEntry->GetColor().GetColor() ] = i+1;
 		}
 
+		if ( i < PALETTE_SIZE )
+		{
+			std::map< ColorData, USHORT >::const_iterator it = maColorSetMap.find( aColWhite.GetColor() );
+			if ( it == maColorSetMap.end() )
+				maColorSetMap[ aColWhite.GetColor() ] = i+1;
+		}
         while ( i < PALETTE_SIZE )
 		{
             // fill empty elements if less then PALLETTE_SIZE colors are available
@@ -914,6 +933,26 @@
 	aColorSet.Show();
 
     AddStatusListener( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:ColorTableState" )));
+    switch ( theSlotId )
+    {
+        case SID_ATTR_CHAR_COLOR_BACKGROUND:
+            AddStatusListener( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:FillColor" )));
+            break;
+        case SID_ATTR_CHAR_COLOR:
+            AddStatusListener( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:Color" )));
+            break;
+        case SID_ATTR_CHAR_COLOR2:
+            AddStatusListener( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:Color" )));
+            break;
+        case SID_BACKGROUND_COLOR:
+            AddStatusListener( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:BackgroundColor" )));
+            break;
+        case SID_EXTRUSION_3D_COLOR:
+            AddStatusListener( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:Extrusion3DColor" )));
+            break;
+        default:
+            break;
+    }
 	if ( bKillTable )
 		delete pColorTable;
 }
@@ -953,6 +992,11 @@
         SfxToolBoxControl::Dispatch( Reference< XDispatchProvider >( GetFrame()->getController(), UNO_QUERY ),
                                      maCommand,
                                      aArgs );
+        if ( maColorChangedHdl.IsSet() )
+        {
+            Color aColor( COL_TRANSPARENT );
+            maColorChangedHdl.Call( &aColor );
+        }
     }
     else if ( !nItemId && (SID_ATTR_CHAR_COLOR == theSlotId || SID_ATTR_CHAR_COLOR2  == theSlotId || SID_EXTRUSION_3D_COLOR == theSlotId) )
     {
@@ -967,6 +1011,11 @@
         SfxToolBoxControl::Dispatch( Reference< XDispatchProvider >( GetFrame()->getController(), UNO_QUERY ),
                                      maCommand,
                                      aArgs );
+        if ( maColorChangedHdl.IsSet() )
+        {
+            Color aColor( COL_TRANSPARENT );
+            maColorChangedHdl.Call( &aColor );
+        }
     }
     else
 	{
@@ -980,6 +1029,11 @@
         SfxToolBoxControl::Dispatch( Reference< XDispatchProvider >( GetFrame()->getController(), UNO_QUERY ),
                                      maCommand,
                                      aArgs );
+        if ( maColorChangedHdl.IsSet() )
+        {
+            Color aColor( aColorItem.GetValue() );
+            maColorChangedHdl.Call( &aColor );
+        }
 	}
 
 	return 0;
@@ -1032,14 +1086,22 @@
 				else
 					nBits |= WB_VSCROLL;
 				aColorSet.SetStyle( nBits );
+				maColorSetMap.clear();
 
 				for ( i = 0; i < nCount; ++i )
 				{
 					pEntry = pColorTable->GetColor(i);
 					aColorSet.SetItemColor( i + 1, pEntry->GetColor() );
 					aColorSet.SetItemText ( i + 1, pEntry->GetName() );
+					maColorSetMap[ pEntry->GetColor().GetColor() ] = i + 1;
 				}
 
+				if ( i < PALETTE_SIZE )
+				{
+					std::map< ColorData, USHORT >::const_iterator it = maColorSetMap.find( aColWhite.GetColor() );
+					if ( it == maColorSetMap.end() )
+						maColorSetMap[ aColWhite.GetColor() ] = i + 1;
+				}
         		while ( i < PALETTE_SIZE )
 				{
 					aColorSet.SetItemColor( i + 1, aColWhite );
@@ -1048,6 +1110,22 @@
 				}
 			}
 		}
+		else if ( pState->ISA( SvxColorItem ) )
+		{
+			Color aColor( ((SvxColorItem *)pState)->GetValue() );
+			if ( aColorSet.IsNoSelection() || aColor != aColorSet.GetItemColor( aColorSet.GetSelectItemId() ) )
+			{
+				aColorSet.SetNoSelection();
+				std::map< ColorData, USHORT >::const_iterator it = maColorSetMap.find( aColor.GetColor() );
+				if ( it != maColorSetMap.end() )
+					aColorSet.SelectItem( it->second );
+				else
+					aColorSet.SelectItem( 0 );
+
+				if ( maColorChangedHdl.IsSet() )
+					maColorChangedHdl.Call( &aColor );
+			}
+		}
 	}
 }
 
@@ -1250,6 +1328,12 @@
     aBorderInner.QueryValue( a );
     aArgs[1].Value = a;
 
+    if ( maBorderChangedHdl.IsSet() )
+    {
+        SvxFrameWindowState_Impl aBorderState( aBorderOuter, aBorderInner );
+        maBorderChangedHdl.Call( &aBorderState );
+    }
+
     /*  #i33380# DR 2004-09-03 Moved the following line above the Dispatch() call.
         This instance may be deleted in the meantime (i.e. when a dialog is opened
         while in Dispatch()), accessing members will crash in this case. */
@@ -2314,6 +2398,8 @@
                     nSlotId, nId, &GetToolBox(), TBX_UPDATER_MODE_CHAR_COLOR_NEW ))
 {
 	rTbx.SetItemBits( nId, TIB_DROPDOWN | rTbx.GetItemBits( nId ) );
+	aCurColor = Color( COL_TRANSPARENT );
+	pBtnUpdater->Update( aCurColor );
 }
 
 // -----------------------------------------------------------------------
@@ -2346,6 +2432,7 @@
         FLOATWIN_POPUPMODE_GRABFOCUS|FLOATWIN_POPUPMODE_ALLOWTEAROFF );
 	pColorWin->StartSelection();
     SetPopupWindow( pColorWin );
+    pColorWin->SetColorChangedHdl( LINK( this, SvxFontColorToolBoxControl, ColorChangedHdl ) );
 	return pColorWin;
 }
 
@@ -2358,18 +2445,40 @@
 {
 	USHORT nId = GetId();
 	ToolBox& rTbx = GetToolBox();
-	const SvxColorItem*	pItem = 0;
-
-	if ( SFX_ITEM_DONTCARE != eState )
-	   pItem = PTR_CAST( SvxColorItem, pState );
-
-	if ( pItem )
-		pBtnUpdater->Update( pItem->GetValue());
 
 	rTbx.EnableItem( nId, SFX_ITEM_DISABLED != eState );
 	rTbx.SetItemState( nId, ( SFX_ITEM_DONTCARE == eState ) ? STATE_DONTKNOW : STATE_NOCHECK );
 }
 
+// -----------------------------------------------------------------------
+
+void SvxFontColorToolBoxControl::Select( BOOL )
+{
+    OUString aCommand( RTL_CONSTASCII_USTRINGPARAM( ".uno:Color" ) );
+    SvxColorItem aColorItem( aCurColor.GetTransparency() ? COL_AUTO : aCurColor, GetSlotId() );
+    INetURLObject aObj( aCommand );
+
+    Any a;
+    Sequence< PropertyValue > aArgs( 1 );
+    aArgs[0].Name = aObj.GetURLPath();
+    aColorItem.QueryValue( a );
+    aArgs[0].Value = a;
+    Dispatch( aCommand, aArgs );
+}
+
+// -----------------------------------------------------------------------
+
+IMPL_LINK( SvxFontColorToolBoxControl, ColorChangedHdl, Color *, pColor )
+{
+	if ( pColor )
+	{
+		aCurColor = *pColor;
+		pBtnUpdater->Update( aCurColor );
+	}
+
+	return 0;
+}
+
 //========================================================================
 // class SvxColorToolBoxControl --------------------------------
 //========================================================================
@@ -2378,12 +2487,11 @@
 
 	SfxToolBoxControl( nSlotId, nId, rTbx )
 {
-    if ( nSlotId == SID_BACKGROUND_COLOR )
-        rTbx.SetItemBits( nId, TIB_DROPDOWNONLY | rTbx.GetItemBits( nId ) );
-    else
-        rTbx.SetItemBits( nId, TIB_DROPDOWN | rTbx.GetItemBits( nId ) );
+    rTbx.SetItemBits( nId, TIB_DROPDOWN | rTbx.GetItemBits( nId ) );
 	rTbx.Invalidate();
     pBtnUpdater = new ::svx::ToolboxButtonColorUpdater( nSlotId, nId, &GetToolBox() );
+	aCurColor = Color( COL_TRANSPARENT );
+	pBtnUpdater->Update( aCurColor );
 }
 
 // -----------------------------------------------------------------------
@@ -2417,6 +2525,7 @@
         FLOATWIN_POPUPMODE_GRABFOCUS|FLOATWIN_POPUPMODE_ALLOWTEAROFF );
 	pColorWin->StartSelection();
     SetPopupWindow( pColorWin );
+    pColorWin->SetColorChangedHdl( LINK( this, SvxColorToolBoxControl, ColorChangedHdl ) );
 	return pColorWin;
 }
 
@@ -2427,19 +2536,49 @@
 	USHORT , SfxItemState eState, const SfxPoolItem* pState )
 
 {
-	const SvxColorItem*	pItem	= 0;
-	if ( SFX_ITEM_DONTCARE != eState )
-		pItem = PTR_CAST( SvxColorItem, pState );
-
-	if ( pItem )
-		pBtnUpdater->Update( pItem->GetValue() );
-
 	USHORT nId = GetId();
 	ToolBox& rTbx = GetToolBox();
 	rTbx.EnableItem( nId, SFX_ITEM_DISABLED != eState );
 	rTbx.SetItemState( nId, ( SFX_ITEM_DONTCARE == eState ) ? STATE_DONTKNOW : STATE_NOCHECK );
 }
 
+// -----------------------------------------------------------------------
+
+void SvxColorToolBoxControl::Select( BOOL )
+{
+    OUString aCommand( RTL_CONSTASCII_USTRINGPARAM( ".uno:BackgroundColor" ) );
+    if ( aCurColor.GetTransparency() )
+    {
+        Sequence< PropertyValue > aArgs;
+        Dispatch( aCommand, aArgs );
+    }
+    else
+    {
+        SvxColorItem aColorItem( aCurColor, GetSlotId() );
+        INetURLObject aObj( aCommand );
+
+        Any a;
+        Sequence< PropertyValue > aArgs( 1 );
+        aArgs[0].Name = aObj.GetURLPath();
+        aColorItem.QueryValue( a );
+        aArgs[0].Value = a;
+        Dispatch( aCommand, aArgs );
+    }
+}
+
+// -----------------------------------------------------------------------
+
+IMPL_LINK( SvxColorToolBoxControl, ColorChangedHdl, Color *, pColor )
+{
+	if ( pColor )
+	{
+		aCurColor = *pColor;
+		pBtnUpdater->Update( aCurColor );
+	}
+
+	return 0;
+}
+
 //========================================================================
 // class SvxFontColorExtToolBoxControl --------------------------------------
 //========================================================================
@@ -2462,6 +2601,7 @@
     USHORT nMode =	SID_ATTR_CHAR_COLOR2 == nSlotId
 		? TBX_UPDATER_MODE_CHAR_COLOR_NEW :	TBX_UPDATER_MODE_CHAR_COLOR_NEW;
     pBtnUpdater = new ::svx::ToolboxButtonColorUpdater( nSlotId, nId, &GetToolBox(), nMode );
+    aCurColor = Color( COL_TRANSPARENT );
 }
 
 // -----------------------------------------------------------------------
@@ -2527,7 +2667,10 @@
 		   pItem = PTR_CAST( SvxColorItem, pState );
 
 		if ( pItem )
-			pBtnUpdater->Update( pItem->GetValue() );
+		{
+			aCurColor = pItem->GetValue();
+			pBtnUpdater->Update( aCurColor );
+		}
 	}
 }
 
@@ -2548,10 +2691,27 @@
         aParamName  = OUString( RTL_CONSTASCII_USTRINGPARAM( "CharBackgroundExt" ));
     }
 
+    // Fix bug reported in the following NeoOffice forum post by forcefully
+    // unsetting the highlight color when it was set to transparent via the
+    // color palette:
+    // http://trinity.neooffice.org/modules.php?name=Forums&file=viewtopic&p=63965#63965
+    BOOL bIsItemChecked = GetToolBox().IsItemChecked( GetId() );
+    if ( bIsItemChecked && GetSlotId() == SID_ATTR_CHAR_COLOR_BACKGROUND && aCurColor.GetTransparency() )
+    {
+        Sequence< PropertyValue > aColorArgs;
+        Dispatch( OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:BackColor" ) ), aColorArgs );
+    }
+
     Sequence< PropertyValue > aArgs( 1 );
     aArgs[0].Name  = aParamName;
     aArgs[0].Value = makeAny( GetToolBox().IsItemChecked( GetId() ));
     Dispatch( aCommand, aArgs );
+
+    if ( !bIsItemChecked && GetSlotId() == SID_ATTR_CHAR_COLOR_BACKGROUND && aCurColor.GetTransparency() )
+    {
+        Sequence< PropertyValue > aColorArgs;
+        Dispatch( OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:BackColor" ) ), aColorArgs );
+    }
 }
 
 //========================================================================
@@ -2564,8 +2724,10 @@
 	ToolBox&    rTbx )
 
     :   SfxToolBoxControl( nSlotId, nId, rTbx )
+    , aCurBorderOuter( SID_ATTR_BORDER_OUTER )
+    , aCurBorderInner( SID_ATTR_BORDER_INNER )
 {
-	rTbx.SetItemBits( nId, TIB_DROPDOWNONLY | rTbx.GetItemBits( nId ) );
+    rTbx.SetItemBits( nId, TIB_DROPDOWN | rTbx.GetItemBits( nId ) );
 }
 
 // -----------------------------------------------------------------------
@@ -2585,6 +2747,7 @@
 	pFrameWin->StartPopupMode( &GetToolBox(), FLOATWIN_POPUPMODE_GRABFOCUS | FLOATWIN_POPUPMODE_ALLOWTEAROFF );
 	pFrameWin->StartSelection();
     SetPopupWindow( pFrameWin );
+    pFrameWin->SetBorderChangedHdl( LINK( this, SvxFrameToolBoxControl, BorderChangedHdl ) );
 
 	return pFrameWin;
 }
@@ -2605,6 +2768,34 @@
                             : STATE_NOCHECK );
 }
 
+// -----------------------------------------------------------------------
+
+void SvxFrameToolBoxControl::Select( BOOL )
+{
+	Any a;
+	Sequence< PropertyValue > aArgs( 2 );
+	aArgs[0].Name = OUString( RTL_CONSTASCII_USTRINGPARAM( "OuterBorder" ));
+	aCurBorderOuter.QueryValue( a );
+	aArgs[0].Value = a;
+	aArgs[1].Name = OUString( RTL_CONSTASCII_USTRINGPARAM( "InnerBorder" ));
+	aCurBorderInner.QueryValue( a );
+	aArgs[1].Value = a;
+	Dispatch( OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:SetBorderStyle" ) ), aArgs );
+}
+
+// -----------------------------------------------------------------------
+
+IMPL_LINK( SvxFrameToolBoxControl, BorderChangedHdl, SvxFrameWindowState_Impl *, pBorderState )
+{
+	if ( pBorderState )
+	{
+		aCurBorderOuter = pBorderState->maBorderOuter;
+		aCurBorderInner = pBorderState->maBorderInner;
+	}
+
+	return 0;
+}
+
 //========================================================================
 // class SvxFrameLineStyleToolBoxControl ---------------------------------
 //========================================================================
