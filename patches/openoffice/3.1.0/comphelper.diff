Index: comphelper/source/misc/mediadescriptor.cxx
===================================================================
--- comphelper/source/misc/mediadescriptor.cxx	(.../tags/DEV300_m35)	(revision 274104)
+++ comphelper/source/misc/mediadescriptor.cxx	(.../cws/mav43)	(revision 274104)
@@ -86,11 +86,14 @@
 #include <com/sun/star/uri/XUriReference.hpp>
 #endif
 #include <com/sun/star/ucb/PostCommandArgument2.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+
 #include <ucbhelper/interceptedinteraction.hxx>
 #include <ucbhelper/content.hxx>
 #include <ucbhelper/commandenvironment.hxx>
 #include <ucbhelper/activedatasink.hxx>
 #include <comphelper/processfactory.hxx>
+#include <comphelper/configurationhelper.hxx>
 
 #if OSL_DEBUG_LEVEL>0
     #ifndef _RTL_USTRBUF_HXX_
@@ -495,15 +498,39 @@
 -----------------------------------------------*/
 sal_Bool MediaDescriptor::addInputStream()
 {
-    return addInputStream_Impl( sal_True );
+    return impl_addInputStream( sal_True );
 }
 
-sal_Bool MediaDescriptor::addInputStreamNoLock()
+/*-----------------------------------------------*/
+sal_Bool MediaDescriptor::addInputStreamOwnLock()
 {
-    return addInputStream_Impl( sal_False );
+    // Own lock file implementation
+
+    sal_Bool bUseLock = sal_True; // the system file locking is used per default
+    try
+    {
+
+		css::uno::Reference< css::uno::XInterface > xCommonConfig = ::comphelper::ConfigurationHelper::openConfig(
+							::comphelper::getProcessServiceFactory(),
+							::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "/org.openoffice.Office.Common" ) ),
+							::comphelper::ConfigurationHelper::E_STANDARD );
+		if ( !xCommonConfig.is() )
+			throw css::uno::RuntimeException();
+
+        ::comphelper::ConfigurationHelper::readRelativeKey(
+                xCommonConfig,
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Misc/" ) ),
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "UseDocumentSystemFileLocking" ) ) ) >>= bUseLock;
+    }
+    catch( const css::uno::Exception& )
+    {
+    }
+
+    return impl_addInputStream( bUseLock );
 }
 
-sal_Bool MediaDescriptor::addInputStream_Impl( sal_Bool bLockFile )
+/*-----------------------------------------------*/
+sal_Bool MediaDescriptor::impl_addInputStream( sal_Bool bLockFile )
 {
     // check for an already existing stream item first
     const_iterator pIt = find(MediaDescriptor::PROP_INPUTSTREAM());
Index: comphelper/inc/comphelper/mediadescriptor.hxx
===================================================================
--- comphelper/inc/comphelper/mediadescriptor.hxx	(.../tags/DEV300_m35)	(revision 274104)
+++ comphelper/inc/comphelper/mediadescriptor.hxx	(.../cws/mav43)	(revision 274104)
@@ -149,17 +149,32 @@
                     
                     A might existing InteractionHandler will be used automaticly,
                     to solve problems!
+
+                    In case of local file the system file locking is used.
  
-            @param  bLockFile
-                    specifies whether the file should be locked
+            @return TRUE, if the stream was already part of the descriptor or could
+                    be created as new item. FALSE otherwhise.
+         */
+        sal_Bool addInputStream();
 
+        //---------------------------------------
+        /** @short  it checks if the descriptor already has a valid
+                    InputStream item and creates a new one, if not.
+
+            @descr  This method uses the current items of this MediaDescriptor,
+                    to open the stream (as e.g. URL, ReadOnly, PostData etcpp.).
+                    It creates a seekable stream and put it into the descriptor.
+                    
+                    A might existing InteractionHandler will be used automaticly,
+                    to solve problems!
+ 
+                    In case of local file the system file locking is used based on
+                    configuration settings.
+
             @return TRUE, if the stream was already part of the descriptor or could
                     be created as new item. FALSE otherwhise.
          */
-        // HACK: IT SHOULD BE ONLY ONE METHOD, THE TEMPORARY SOLUTION ALLOWS TO AVOID INCOMPATIBLE BUILD
-        sal_Bool addInputStream_Impl( sal_Bool bLockFile );
-        sal_Bool addInputStream();
-        sal_Bool addInputStreamNoLock();
+        sal_Bool addInputStreamOwnLock();
         
         //---------------------------------------
         /** @short  it checks if the descriptor describes a readonly stream.
@@ -247,6 +262,25 @@
                     the "normalized" URL (e.g. without jumpmark)
          */
         COMPHELPER_DLLPRIVATE ::rtl::OUString impl_normalizeURL(const ::rtl::OUString& sURL);            
+
+        //---------------------------------------
+        /** @short  it checks if the descriptor already has a valid
+                    InputStream item and creates a new one, if not.
+
+            @descr  This method uses the current items of this MediaDescriptor,
+                    to open the stream (as e.g. URL, ReadOnly, PostData etcpp.).
+                    It creates a seekable stream and put it into the descriptor.
+                    
+                    A might existing InteractionHandler will be used automaticly,
+                    to solve problems!
+ 
+            @param  bLockFile
+                    specifies whether the file should be locked
+
+            @return TRUE, if the stream was already part of the descriptor or could
+                    be created as new item. FALSE otherwhise.
+         */
+        COMPHELPER_DLLPRIVATE sal_Bool impl_addInputStream( sal_Bool bLockFile );
 };
 
 } // namespace comphelper