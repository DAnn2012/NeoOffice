--- configure.ac	2015-11-25 07:55:38.000000000 -0500
+++ configure.ac	2020-12-23 16:54:16.000000000 -0500
@@ -1670,6 +1670,11 @@
          driver. If fb_config is not in PATH, use FBCONFIG to point to it.]),,
     [with_system_firebird="$with_system_libs"])
 
+AC_ARG_WITH(system-libtommath,
+            AS_HELP_STRING([--with-system-libtommath],
+                           [Use libtommath already on system]),,
+            [with_system_libtommath="$with_system_libs"])
+
 AC_ARG_WITH(system-hsqldb,
     AS_HELP_STRING([--with-system-hsqldb],
         [Use hsqldb already on system.]))
@@ -2291,7 +2296,7 @@
     [
                           Usage:     --with-macosx-sdk=<version>
 
-                          e. g.: --with-macosx-sdk=10.8
+                          e. g.: --with-macosx-sdk=11.1
 
                           there are 3 options to control the MacOSX build:
                           --with-macosx-sdk (referred as 'sdk' below)
@@ -2305,15 +2310,15 @@
                           ==========================================
                            command line      || config result
                           ==========================================
-                          min  | max  | sdk  || min  | max  | sdk  |
-                          ?    | ?    | ?    || 10.8 | 10.s | 10.s |
-                          ?    | ?    | 10.x || 10.8 | 10.x | 10.x |
-                          ?    | 10.x | ?    || 10.8 | 10.s | 10.s |
-                          ?    | 10.x | 10.y || 10.8 | 10.x | 10.y |
-                          10.x | ?    | ?    || 10.x | 10.s | 10.s |
-                          10.x | ?    | 10.y || 10.x | 10.y | 10.y |
-                          10.x | 10.y | ?    || 10.x | 10.y | 10.y |
-                          10.x | 10.y | 10.z || 10.x | 10.y | 10.z |
+                          min  | max  | sdk  || min   | max  | sdk  |
+                          ?    | ?    | ?    || 11.1 | 10.s | 10.s |
+                          ?    | ?    | 10.x || 11.1 | 10.x | 10.x |
+                          ?    | 10.x | ?    || 11.1 | 10.s | 10.s |
+                          ?    | 10.x | 10.y || 11.1 | 10.x | 10.y |
+                          10.x | ?    | ?    || 10.x  | 10.s | 10.s |
+                          10.x | ?    | 10.y || 10.x  | 10.y | 10.y |
+                          10.x | 10.y | ?    || 10.x  | 10.y | 10.y |
+                          10.x | 10.y | 10.z || 10.x  | 10.y | 10.z |
 
 
                           see: http://developer.apple.com/library/mac/#technotes/tn2064/_index.html
@@ -2329,7 +2334,7 @@
     [
                           Usage:     --with-macosx-version-min-required=<version>
 
-                          e. g.: --with-macos-version-min-required=10.8
+                          e. g.: --with-macos-version-min-required=11.1
                           see --with-macosx-sdk for more info
     ],
 ,)
@@ -2340,7 +2345,7 @@
     [
                           Usage:     --with-macosx-version-max-allowed=<version>
 
-                          e. g.: --with-macos-version-max-allowed=10.8
+                          e. g.: --with-macos-version-max-allowed=11.1
                           see --with-macosx-sdk for more info
     ],
 ,)
@@ -2724,7 +2729,7 @@
 
     AC_MSG_CHECKING([what Mac OS X SDK to use])
 
-    for _macosx_sdk in $with_macosx_sdk 10.8 10.9 10.10 10.11; do
+    for _macosx_sdk in $with_macosx_sdk 11.1; do
         MACOSX_SDK_PATH=`xcrun --sdk macosx${_macosx_sdk} --show-sdk-path 2> /dev/null`
         if test -d "$MACOSX_SDK_PATH"; then
             with_macosx_sdk="${_macosx_sdk}"
@@ -2743,25 +2748,16 @@
     AC_MSG_RESULT([SDK $with_macosx_sdk at $MACOSX_SDK_PATH])
 
     case $with_macosx_sdk in
-    10.8)
-        MACOSX_SDK_VERSION=1080
-        ;;
-    10.9)
-        MACOSX_SDK_VERSION=1090
-        ;;
-    10.10)
-        MACOSX_SDK_VERSION=101000
-        ;;
-    10.11)
-        MACOSX_SDK_VERSION=101100
+    11.1)
+        MACOSX_SDK_VERSION=110100
         ;;
     *)
-        AC_MSG_ERROR([with-macosx-sdk $with_macosx_sdk is not a supported value, supported values are 10.8--11])
+        AC_MSG_ERROR([with-macosx-sdk $with_macosx_sdk is not a supported value, supported values are 11.1])
         ;;
     esac
 
     if test "$with_macosx_version_min_required" = "" ; then
-        with_macosx_version_min_required="10.8";
+        with_macosx_version_min_required="11.1";
     fi
 
     if test "$with_macosx_version_max_allowed" = "" ; then
@@ -2776,20 +2772,11 @@
     MACOSX_DEPLOYMENT_TARGET="$with_macosx_version_min_required"
 
     case "$with_macosx_version_min_required" in
-    10.8)
-        MAC_OS_X_VERSION_MIN_REQUIRED="1080"
-        ;;
-    10.9)
-        MAC_OS_X_VERSION_MIN_REQUIRED="1090"
-        ;;
-    10.10)
-        MAC_OS_X_VERSION_MIN_REQUIRED="101000"
-        ;;
-    10.11)
-        MAC_OS_X_VERSION_MIN_REQUIRED="101100"
+    11.1)
+        MAC_OS_X_VERSION_MIN_REQUIRED="110100"
         ;;
     *)
-        AC_MSG_ERROR([with-macosx-version-min-required $with_macosx_version_min_required is not a supported value, supported values are 10.8--11])
+        AC_MSG_ERROR([with-macosx-version-min-required $with_macosx_version_min_required is not a supported value, supported values are 11.1])
         ;;
     esac
 
@@ -2813,20 +2800,11 @@
     fi
 
     case "$with_macosx_version_max_allowed" in
-    10.8)
-        MAC_OS_X_VERSION_MAX_ALLOWED="1080"
-        ;;
-    10.9)
-        MAC_OS_X_VERSION_MAX_ALLOWED="1090"
-        ;;
-    10.10)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101000"
-        ;;
-    10.11)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101100"
+    11.1)
+        MAC_OS_X_VERSION_MAX_ALLOWED="110100"
         ;;
     *)
-        AC_MSG_ERROR([with-macosx-version-max-allowed $with_macosx_version_max_allowed is not a supported value, supported values are 10.8--11])
+        AC_MSG_ERROR([with-macosx-version-max-allowed $with_macosx_version_max_allowed is not a supported value, supported values are 11.1])
         ;;
     esac
 
@@ -3703,6 +3681,64 @@
 UNOWINREG_DLL="185d60944ea767075d27247c3162b3bc-unowinreg.dll"
 AC_SUBST(UNOWINREG_DLL)
 
+COM_IS_CLANG=
+AC_MSG_CHECKING([whether the compiler is actually Clang])
+AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+    #ifndef __clang__
+    you lose
+    #endif
+    int foo=42;
+    ]])],
+    [AC_MSG_RESULT([yes])
+     COM_IS_CLANG=TRUE],
+    [AC_MSG_RESULT([no])])
+AC_SUBST(COM_IS_CLANG)
+
+CC_PLAIN=$CC
+CLANGVER=
+if test "$COM_IS_CLANG" = TRUE; then
+    AC_MSG_CHECKING([whether Clang is new enough])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+        #if !defined __apple_build_version__
+        #error
+        #endif
+        ]])],
+        [my_apple_clang=yes],[my_apple_clang=])
+    if test "$my_apple_clang" = yes; then
+        AC_MSG_RESULT([assumed yes (Apple Clang)])
+    else
+        if test "$_os" = WINNT; then
+            dnl In which case, assume clang-cl:
+            my_args="/EP /TC"
+            dnl Filter out -FIIntrin.h, which needs to be explicitly stated for
+            dnl clang-cl:
+            CC_PLAIN=
+            for i in $CC; do
+                case $i in
+                -FIIntrin.h)
+                    ;;
+                *)
+                    CC_PLAIN="$CC_PLAIN $i"
+                    ;;
+                esac
+            done
+        else
+            my_args="-E -P"
+        fi
+        clang_version=`echo __clang_major__.__clang_minor__.__clang_patchlevel__ | $CC_PLAIN $my_args - | sed 's/ //g'`
+        CLANG_FULL_VERSION=`echo __clang_version__ | $CC_PLAIN $my_args -`
+        CLANGVER=`echo $clang_version \
+            | $AWK -F. '{ print \$1*10000+(\$2<100?\$2:99)*100+(\$3<100?\$3:99) }'`
+        if test "$CLANGVER" -ge 50002; then
+            AC_MSG_RESULT([yes ($clang_version)])
+        else
+            AC_MSG_ERROR(["$CLANG_FULL_VERSION" is too old or unrecognized, must be at least Clang 5.0.2])
+        fi
+        AC_DEFINE_UNQUOTED(CLANG_VERSION,$CLANGVER)
+        AC_DEFINE_UNQUOTED(CLANG_FULL_VERSION,$CLANG_FULL_VERSION)
+    fi
+fi
+
 #
 # prefix C with ccache if needed
 #
@@ -7543,7 +7579,7 @@
 dnl ===================================================================
 # libcmis requires curl and we can't build curl for iOS
 if test $_os != iOS; then
-    libo_CHECK_SYSTEM_MODULE([libcmis],[CMIS],[libcmis-0.5 >= 0.5.0])
+    libo_CHECK_SYSTEM_MODULE([libcmis],[CMIS],[libcmis-0.5 >= 0.5.2])
     ENABLE_CMIS=TRUE
 else
     ENABLE_CMIS=
@@ -8179,7 +8215,9 @@
 dnl ===================================================================
 dnl Check for PostgreSQL stuff
 dnl ===================================================================
+AC_MSG_CHECKING([whether to build the PostgreSQL SDBC driver])
 if test "x$enable_postgresql_sdbc" != "xno"; then
+    AC_MSG_RESULT([yes])
     SCPDEFS="$SCPDEFS -DWITH_POSTGRESQL_SDBC"
 
     if test "$with_krb5" = "yes" -a "$enable_openssl" = "no"; then
@@ -8189,9 +8227,9 @@
         AC_MSG_ERROR([GSSAPI needs OpenSSL, but --disable-openssl was given.])
     fi
 
-    AC_MSG_CHECKING([PostgreSQL C interface])
+    postgres_interface=""
     if test "$with_system_postgresql" = "yes"; then
-        AC_MSG_RESULT([external PostgreSQL])
+        postgres_interface="external PostgreSQL"
         SYSTEM_POSTGRESQL=TRUE
         if test "$_os" = Darwin; then
             supp_path=''
@@ -8200,11 +8238,19 @@
             done
         fi
         AC_PATH_PROG(PGCONFIG, pg_config, ,$PATH$pg_supp_path)
-        if test -z "$PGCONFIG"; then
-            AC_MSG_ERROR([pg_config needed; set PGCONFIG if not in PATH])
+        if test -n "$PGCONFIG"; then
+            POSTGRESQL_INC=-I$(${PGCONFIG} --includedir)
+            POSTGRESQL_LIB="-L$(${PGCONFIG} --libdir)"
+        else
+            PKG_CHECK_MODULES(POSTGRESQL, libpq, [
+              POSTGRESQL_INC=$POSTGRESQL_CFLAGS
+              POSTGRESQL_LIB=$POSTGRESQL_LIBS
+            ],[
+              AC_MSG_ERROR([pg_config or 'pkg-config libpq' needed; set PGCONFIG if not in PATH])
+            ])
         fi
-        POSTGRESQL_INC=-I$(${PGCONFIG} --includedir)
-        POSTGRESQL_LIB="-L$(${PGCONFIG} --libdir)"
+        FilterLibs "${POSTGRESQL_LIB}"
+        POSTGRESQL_LIB="${filteredlibs}"
     else
         # if/when anything else than PostgreSQL uses Kerberos,
         # move this out of `test "x$enable_postgresql_sdbc" != "xno"'
@@ -8212,16 +8258,18 @@
         WITH_GSSAPI=
         case "$_os" in
         Darwin)
-            # MacOS X has system MIT Kerberos 5 since 10.4
+            # macOS has system MIT Kerberos 5 since 10.4
             if test "$with_krb5" != "no"; then
                 WITH_KRB5=TRUE
                 save_LIBS=$LIBS
+                # Not sure whether it makes any sense here to search multiple potential libraries; it is not likely
+                # that the libraries where these functions are located on macOS will change, is it?
                 AC_SEARCH_LIBS(com_err, [com_err 'com_err -lssl -lcrypto' krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],
-                    [AC_MSG_ERROR([could not find function 'com_err' required for Kerberos 5, try installing libcom_err devel package])])
+                    [AC_MSG_ERROR([could not find function 'com_err' required for Kerberos 5])])
                 KRB5_LIBS=$LIBS
                 LIBS=$save_LIBS
                 AC_SEARCH_LIBS(krb5_sendauth, [krb5 'krb5 -lcrypto -ldes -lasn1 -lroken'], [],
-                    [AC_MSG_ERROR([could not find function 'krb5_sendauth' required for Kerberos 5, try installing krb5 devel package])])
+                    [AC_MSG_ERROR([could not find function 'krb5_sendauth' required for Kerberos 5])])
                 KRB5_LIBS="$KRB5_LIBS $LIBS"
                 LIBS=$save_LIBS
             fi
@@ -8286,17 +8334,21 @@
 
         if test -n "$with_libpq_path"; then
             SYSTEM_POSTGRESQL=TRUE
-            AC_MSG_RESULT([external libpq])
+            postgres_interface="external libpq"
             POSTGRESQL_LIB="-L${with_libpq_path}/lib/"
             POSTGRESQL_INC=-I"${with_libpq_path}/include/"
         else
             SYSTEM_POSTGRESQL=
-            AC_MSG_RESULT([internal])
+            postgres_interface="internal"
             POSTGRESQL_LIB=""
             POSTGRESQL_INC="%OVERRIDE_ME%"
             BUILD_TYPE="$BUILD_TYPE POSTGRESQL"
         fi
     fi
+
+    AC_MSG_CHECKING([PostgreSQL C interface])
+    AC_MSG_RESULT([$postgres_interface])
+
     if test "${SYSTEM_POSTGRESQL}" = "TRUE"; then
         AC_MSG_NOTICE([checking system PostgreSQL prerequisites])
         save_CFLAGS=$CFLAGS
@@ -8312,6 +8364,8 @@
         LIBS=$save_LIBS
     fi
     BUILD_POSTGRESQL_SDBC=TRUE
+else
+    AC_MSG_RESULT([no])
 fi
 AC_SUBST(WITH_KRB5)
 AC_SUBST(WITH_GSSAPI)
@@ -8325,8 +8379,8 @@
 dnl ===================================================================
 dnl Check for Firebird stuff
 dnl ===================================================================
-ENABLE_FIREBIRD_SDBC=""
-if test "x$enable_firebird_sdbc" = "xyes"; then
+ENABLE_FIREBIRD_SDBC=
+if test "$enable_firebird_sdbc" = "yes" ; then
     SCPDEFS="$SCPDEFS -DWITH_FIREBIRD_SDBC"
 
     dnl ===================================================================
@@ -8339,51 +8393,59 @@
         AC_PATH_PROG(FIREBIRDCONFIG, [fb_config])
         if test -z "$FIREBIRDCONFIG"; then
             AC_MSG_NOTICE([No fb_config -- using pkg-config])
-            PKG_CHECK_MODULES(FIREBIRD, fbembed)
-            FIREBIRD_VERSION=`pkg-config --modversion fbembed`
+            PKG_CHECK_MODULES([FIREBIRD], [fbclient >= 3], [FIREBIRD_PKGNAME=fbclient], [
+                PKG_CHECK_MODULES([FIREBIRD], [fbembed], [FIREBIRD_PKGNAME=fbembed])
+            ])
+            FIREBIRD_VERSION=`pkg-config --modversion "$FIREBIRD_PKGNAME"`
         else
             AC_MSG_NOTICE([fb_config found])
             FIREBIRD_VERSION=`$FIREBIRDCONFIG --version`
             AC_MSG_CHECKING([for Firebird Client library])
             FIREBIRD_CFLAGS=`$FIREBIRDCONFIG --cflags`
             FIREBIRD_LIBS=`$FIREBIRDCONFIG --embedlibs`
+            FilterLibs "${FIREBIRD_LIBS}"
+            FIREBIRD_LIBS="${filteredlibs}"
         fi
         AC_MSG_RESULT([includes `$FIREBIRD_CFLAGS', libraries `$FIREBIRD_LIBS'])
         AC_MSG_CHECKING([Firebird version])
         if test -n "${FIREBIRD_VERSION}"; then
             FIREBIRD_MAJOR=`echo $FIREBIRD_VERSION | cut -d"." -f1`
             FIREBIRD_MINOR=`echo $FIREBIRD_VERSION | cut -d"." -f2`
-            if test "$FIREBIRD_MAJOR" -eq "2" -a "$FIREBIRD_MINOR" -eq "5"; then
+            if test "$FIREBIRD_MAJOR" -eq "3" -a "$FIREBIRD_MINOR" -eq "0"; then
                 AC_MSG_RESULT([OK])
             else
-                AC_MSG_ERROR([Ensure firebird 2.5.x is installed])
+                AC_MSG_ERROR([Ensure firebird 3.0.x is installed])
             fi
         else
             __save_CFLAGS="${CFLAGS}"
             CFLAGS="${CFLAGS} ${FIREBIRD_CFLAGS}"
             AC_COMPILE_IFELSE([AC_LANG_SOURCE([[#include <ibase.h>
-#if defined(FB_API_VER) && FB_API_VER == 25
+#if defined(FB_API_VER) && FB_API_VER == 30
+int fb_api_is_30(void) { return 0; }
 #else
 #error "Wrong Firebird API version"
-#endif]])],AC_MSG_RESULT([OK]),AC_MSG_ERROR([Ensure firebird 2.5.x is installed]))
+#endif]])],AC_MSG_RESULT([OK]),AC_MSG_ERROR([Ensure firebird 3.0.x is installed]))
             CFLAGS="${__save_CFLAGS}"
         fi
-        ENABLE_FIREBIRD_SDBC="TRUE"
+        ENABLE_FIREBIRD_SDBC=TRUE
+        AC_DEFINE([ENABLE_FIREBIRD_SDBC],1)
     elif test "$enable_database_connectivity" != yes; then
         AC_MSG_RESULT([none])
     elif test "$cross_compiling" = "yes"; then
         AC_MSG_RESULT([none])
     else
-        dnl We need libatomic-ops for any non X86/X64 system
+        dnl Embedded Firebird has version 3.0
+        AC_DEFINE(HAVE_FIREBIRD_30, 1)
+        dnl We need libatomic_ops for any non X86/X64 system
         if test "${CPUNAME}" != INTEL -a "${CPUNAME}" != X86_64; then
             dnl ===================================================================
-            dnl Check for system libatomic-ops
+            dnl Check for system libatomic_ops
             dnl ===================================================================
             libo_CHECK_SYSTEM_MODULE([libatomic_ops],[ATOMIC_OPS],[atomic_ops >= 0.7.2])
             if test "$with_system_libatomic_ops" = "yes"; then
                 SYSTEM_LIBATOMIC_OPS=TRUE
                 AC_CHECK_HEADERS(atomic_ops.h, [],
-                [AC_MSG_ERROR(atomic_ops.h not found. install libatomic-ops)], [])
+                [AC_MSG_ERROR(atomic_ops.h not found. install libatomic_ops)], [])
             else
                 SYSTEM_LIBATOMIC_OPS=
                 LIBATOMIC_OPS_CFLAGS="-I${WORKDIR}/UnpackedTarball/libatomic_ops/include"
@@ -8394,11 +8456,26 @@
 
         AC_MSG_RESULT([internal])
         SYSTEM_FIREBIRD=
-        FIREBIRD_CFLAGS="-I${WORKDIR}/UnpackedTarball/firebird/include"
-        FIREBIRD_LIBS="-lfbembed"
+        FIREBIRD_CFLAGS="-I${WORKDIR}/UnpackedTarball/firebird/gen/Release/firebird/include"
+        FIREBIRD_LIBS="-lfbclient"
+
+        if test "$with_system_libtommath" = "yes"; then
+            SYSTEM_LIBTOMMATH=TRUE
+            dnl check for tommath presence
+            save_LIBS=$LIBS
+            AC_CHECK_HEADER(tommath.h,,AC_MSG_ERROR(Include file for tommath not found - please install development tommath package))
+            AC_CHECK_LIB(tommath, mp_init, TOMMATH_LIBS=-ltommath, AC_MSG_ERROR(Library tommath not found - please install development tommath package))
+            LIBS=$save_LIBS
+        else
+            SYSTEM_LIBTOMMATH=
+            LIBTOMMATH_CFLAGS="-I${WORKDIR}/UnpackedTarball/libtommath"
+            LIBTOMMATH_LIBS="-ltommath"
+            BUILD_TYPE="$BUILD_TYPE LIBTOMMATH"
+        fi
 
         BUILD_TYPE="$BUILD_TYPE FIREBIRD"
-        ENABLE_FIREBIRD_SDBC="TRUE"
+        ENABLE_FIREBIRD_SDBC=TRUE
+        AC_DEFINE([ENABLE_FIREBIRD_SDBC],1)
     fi
 fi
 AC_SUBST(ENABLE_FIREBIRD_SDBC)
@@ -8408,8 +8485,8 @@
 AC_SUBST(SYSTEM_FIREBIRD)
 AC_SUBST(FIREBIRD_CFLAGS)
 AC_SUBST(FIREBIRD_LIBS)
-dnl AC_SUBST([TOMMATH_CFLAGS])
-dnl AC_SUBST([TOMMATH_LIBS])
+AC_SUBST([TOMMATH_CFLAGS])
+AC_SUBST([TOMMATH_LIBS])
 
 dnl ===================================================================
 dnl Check for system curl
@@ -8484,15 +8561,11 @@
 if test "$with_system_boost" = "yes"; then
     AC_MSG_RESULT([external])
     SYSTEM_BOOST=TRUE
-    AX_BOOST_BASE(1.47)
+    AX_BOOST_BASE([1.66],,[AC_MSG_ERROR([no suitable Boost found])])
     AX_BOOST_DATE_TIME
+    AX_BOOST_FILESYSTEM
     AX_BOOST_IOSTREAMS
-    mingw_boost_date_time_dll=`echo $BOOST_DATE_TIME_LIB | sed -e 's/^-l//' -e 's/\.dll$//'`
-    libo_MINGW_TRY_DLL([$mingw_boost_date_time_dll])
-    if test -z "$MINGW_BOOST_DATE_TIME_DLL"; then
-        # if not found, try again with 'lib' prefix
-        libo_MINGW_CHECK_DLL([lib$mingw_boost_date_time_dll])
-    fi
+    AX_BOOST_LOCALE
     AC_LANG_PUSH([C++])
     save_CXXFLAGS=$CXXFLAGS
     CXXFLAGS="$CXXFLAGS $BOOST_CPPFLAGS $CXXFLAGS_CXX11"
@@ -8500,28 +8573,21 @@
        [AC_MSG_ERROR(boost/shared_ptr.hpp not found. install boost)], [])
     AC_CHECK_HEADER(boost/spirit/include/classic_core.hpp, [],
        [AC_MSG_ERROR(boost/spirit/include/classic_core.hpp not found. install boost >= 1.36)], [])
-    AC_CHECK_HEADER(boost/function.hpp, [],
-       [AC_MSG_ERROR(boost/function.hpp not found. install boost)], [])
-    AC_MSG_CHECKING([whether boost signals2 works])
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/signals2/signal.hpp>]],
-        [[ boost::signals2::signal<void()> s; s(); ]])],
-        [AC_MSG_RESULT([yes])],
-        [AC_MSG_ERROR([no, install boost >= 1.55 or use --without-system-boost])])
-    CXXFLAGS="$CXXFLAGS -fno-exceptions"
-    AC_MSG_CHECKING([whether boost/function.hpp compiles with -fno-exceptions])
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/function.hpp>
-]], [[]])],[ac_cv_cxx_boost_no_exceptions_broken=no],[ac_cv_cxx_boost_no_exceptions_broken=yes])
-    if test "$ac_cv_cxx_boost_no_exceptions_broken" = "yes"; then
-        AC_MSG_ERROR([no, see https://bugzilla.redhat.com/show_bug.cgi?id=477131])
-    else
-        AC_MSG_RESULT([yes])
-    fi
     CXXFLAGS=$save_CXXFLAGS
     AC_LANG_POP([C++])
+    # this is in m4/ax_boost_base.m4
+    FilterLibs "${BOOST_LDFLAGS}"
+    BOOST_LDFLAGS="${filteredlibs}"
 else
     AC_MSG_RESULT([internal])
     BUILD_TYPE="$BUILD_TYPE BOOST"
     SYSTEM_BOOST=
+    if test "${COM}" = "GCC" -o "${COM_IS_CLANG}" = "TRUE"; then
+        # use warning-suppressing wrapper headers
+        BOOST_CPPFLAGS="-I${SRC_ROOT}/external/boost/include -I${WORKDIR}/UnpackedTarball/boost"
+    else
+        BOOST_CPPFLAGS="-I${WORKDIR}/UnpackedTarball/boost"
+    fi
 fi
 AC_SUBST(SYSTEM_BOOST)
 
