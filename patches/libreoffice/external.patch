--- hsqldb/UnpackedTarball_hsqldb.mk	2015-11-25 04:55:38.000000000 -0800
+++ hsqldb/UnpackedTarball_hsqldb.mk	2016-11-13 13:52:01.000000000 -0800
@@ -27,6 +27,7 @@
 	$(if $(HSQLDB_USE_JDBC_4_1),\
 		external/hsqldb/patches/jdbc-4.1.patch \
 	) \
+	external/hsqldb/patches/hsqldb.patch \
 ))
 
 # vim: set noet sw=4 ts=4:
--- opencollada/patches/opencollada.libxml.patch.0	2015-11-25 05:55:38.000000000 -0700
+++ opencollada/patches/opencollada.libxml.patch.0	2018-10-15 19:04:44.000000000 -0600
@@ -10,3 +10,14 @@
  #include <string>
  
  #include "COLLADABUPlatform.h"
+--- GeneratedSaxParser/src/GeneratedSaxParserUtils.cpp	2018-10-15 18:32:01.000000000 -0600
++++ GeneratedSaxParser/src/GeneratedSaxParserUtils.cpp	2018-10-15 18:59:21.000000000 -0600
+@@ -9,7 +9,7 @@
+ */
+ 
+ #include "GeneratedSaxParserUtils.h"
+-#include <math.h>
++#include <cmath>
+ #include <memory>
+ #include <string.h>
+ #include <limits>
--- libvisio/UnpackedTarball_libvisio.mk	2015-11-25 04:55:38.000000000 -0800
+++ libvisio/UnpackedTarball_libvisio.mk	2019-08-07 19:37:41.000000000 -0700
@@ -13,6 +13,7 @@
 
 $(eval $(call gb_UnpackedTarball_add_patches,libvisio,\
        external/libvisio/vsd-msvc-max.patch.1 \
+       external/libvisio/libvisio.patch.1 \
 ))
 
 # vim: set noet sw=4 ts=4:
--- libabw/UnpackedTarball_libabw.mk	2015-11-25 04:55:38.000000000 -0800
+++ libabw/UnpackedTarball_libabw.mk	2019-08-16 10:44:25.000000000 -0700
@@ -11,4 +11,8 @@
 
 $(eval $(call gb_UnpackedTarball_set_tarball,libabw,$(ABW_TARBALL)))
 
+$(eval $(call gb_UnpackedTarball_add_patches,libabw,\
+       external/libabw/libabw.patch.1 \
+))
+
 # vim: set noet sw=4 ts=4:
--- expat/ExternalProject_expat.mk	2015-11-25 04:55:38.000000000 -0800
+++ expat/ExternalProject_expat.mk	2019-09-22 19:18:51.000000000 -0700
@@ -15,8 +15,9 @@
 
 $(call gb_ExternalProject_get_state_target,expat,configure) :
 	$(call gb_ExternalProject_run,configure,\
-		./configure \
-			$(if $(CROSS_COMPILING),--build=$(BUILD_PLATFORM) --host=$(HOST_PLATFORM)) \
+		./configure --without-docbook \
+			$(if $(CROSS_COMPILING),--build=$(BUILD_PLATFORM) --host=$(HOST_PLATFORM) \
+			$(if $(filter INTEL ARM,$(CPUNAME)),ac_cv_c_bigendian=no)) \
 	,,expat_configure.log)
 
 # vim: set noet sw=4 ts=4:
--- expat/Module_expat.mk	2015-11-25 04:55:38.000000000 -0800
+++ expat/Module_expat.mk	2018-05-09 03:27:29.000000000 -0700
@@ -14,14 +14,7 @@
 	StaticLibrary_expat \
 ))
 
-# Actually it wasn't that clear if we should
-# run configure step on mingw or not:
-# CONFIGURATION_ACTION wasn't set, but
-# CROSS_COMPILE case was handled in original makefile
-
-# tested it on mingw and it doesn't hurt ;-)
-#ifneq ($(OS),WNT)
-ifneq ($(OS)$(COM),WNTMSC)
+ifneq ($(OS),WNT)
 $(eval $(call gb_Module_add_targets,expat,\
 	ExternalProject_expat \
 ))
--- expat/README	2015-11-25 04:55:38.000000000 -0800
+++ expat/README	2018-05-09 03:27:29.000000000 -0700
@@ -1,4 +1,4 @@
 Simple SAX parser library with added UTF-16 support.
 
 From:
-[http://expat.sourceforge.net/]
+[https://github.com/libexpat/libexpat]
--- expat/StaticLibrary_expat.mk	2015-11-25 04:55:38.000000000 -0800
+++ expat/StaticLibrary_expat.mk	2019-09-22 19:18:51.000000000 -0700
@@ -9,13 +9,13 @@
 
 $(eval $(call gb_StaticLibrary_StaticLibrary,expat))
 
-$(eval $(call gb_StaticLibrary_set_warnings_not_errors,expat))
+$(eval $(call gb_StaticLibrary_set_warnings_disabled,expat))
 
 $(eval $(call gb_StaticLibrary_use_unpacked,expat,expat))
 
 # no configure step on windows, no dependency
-ifneq ($(OS)$(COM),WNTMSC)
-$(eval $(call gb_StaticLibrary_use_external_project,expat,expat))
+ifneq ($(OS),WNT)
+$(eval $(call gb_StaticLibrary_use_external_project,expat,expat,full))
 endif
 
 $(eval $(call gb_StaticLibrary_set_include,expat,\
@@ -42,11 +42,6 @@
 ))
 endif
 
-# suppress warning spam
-$(eval $(call gb_StaticLibrary_add_cflags,expat,\
-	-w \
-))
-
 $(eval $(call gb_StaticLibrary_add_generated_cobjects,expat,\
 	UnpackedTarball/expat/lib/xmlparse \
 	UnpackedTarball/expat/lib/xmlrole \
--- expat/StaticLibrary_expat_x64.mk	2015-11-25 04:55:38.000000000 -0800
+++ expat/StaticLibrary_expat_x64.mk	2019-09-22 19:18:51.000000000 -0700
@@ -11,7 +11,7 @@
 
 $(eval $(call gb_StaticLibrary_set_x64,expat_x64,YES))
 
-$(eval $(call gb_StaticLibrary_set_warnings_not_errors,expat_x64))
+$(eval $(call gb_StaticLibrary_set_warnings_disabled,expat_x64))
 
 $(eval $(call gb_StaticLibrary_use_unpacked,expat_x64,expat))
 
--- expat/UnpackedTarball_expat.mk	2015-11-25 04:55:38.000000000 -0800
+++ expat/UnpackedTarball_expat.mk	2019-09-22 19:18:51.000000000 -0700
@@ -11,8 +11,10 @@
 
 $(eval $(call gb_UnpackedTarball_set_tarball,expat,$(EXPAT_TARBALL)))
 
+$(eval $(call gb_UnpackedTarball_update_autoconf_configs,expat,conftools))
+
 $(eval $(call gb_UnpackedTarball_add_patches,expat,\
-	external/expat/expat-2.1.0.patch \
+	external/expat/expat-winapi.patch \
 ))
 
 # This is a bit hackish.
--- expat/expat-winapi.patch	2015-11-25 04:55:38.000000000 -0800
+++ 
@@ -1,13 +1,13 @@
 --- misc/expat-2.1.0/lib/expat_external.h	2009-11-16 08:53:17.375000000 +0000
 +++ misc/build/expat-2.1.0/lib/expat_external.h	2009-11-16 08:53:34.703125000 +0000
-@@ -7,10 +7,6 @@
+@@ -81,10 +81,6 @@
+ #  ifndef XML_BUILDING_EXPAT
+ /* using Expat from an application */
  
- /* External API definitions */
- 
--#if defined(_MSC_EXTENSIONS) && !defined(__BEOS__) && !defined(__CYGWIN__)
--#define XML_USE_MSC_EXTENSIONS 1
--#endif
+-#    if defined(_MSC_EXTENSIONS) && ! defined(__BEOS__) && ! defined(__CYGWIN__)
+-#      define XMLIMPORT __declspec(dllimport)
+-#    endif
 -
- /* Expat tries very hard to make the API boundary very specifically
-    defined.  There are two macros defined to control this boundary;
-    each of these can be defined before including this header to
+ #  endif
+ #endif /* not defined XML_STATIC */
+ 
--- Module_external.mk	2015-11-25 07:55:38.000000000 -0500
+++ Module_external.mk	2020-12-18 15:40:25.000000000 -0500
@@ -64,6 +64,7 @@
 	$(call gb_Helper_optional,LIBXML2,libxml2) \
 	$(call gb_Helper_optional,LIBXSLT,libxslt) \
 	$(call gb_Helper_optional,LPSOLVE,lpsolve) \
+	$(call gb_Helper_optional,LIBTOMMATH,libtommath) \
 	$(call gb_Helper_optional,MARIADB,libmariadb) \
 	$(call gb_Helper_optional,MDDS,mdds) \
 	$(if $(WITH_EXTRA_EXTENSIONS),misc_extensions) \
--- libcmis/UnpackedTarball_libcmis.mk	2020-12-09 13:56:14.000000000 -0500
+++ libcmis/UnpackedTarball_libcmis.mk	2020-12-21 06:56:15.000000000 -0500
@@ -9,7 +9,7 @@
 
 $(eval $(call gb_UnpackedTarball_UnpackedTarball,libcmis))
 
-$(eval $(call gb_UnpackedTarball_set_tarball,libcmis,$(LIBCMIS_TARBALL)))
+$(eval $(call gb_UnpackedTarball_set_tarball,libcmis,$(CMIS_TARBALL)))
 
 $(eval $(call gb_UnpackedTarball_set_patchlevel,libcmis,1))
 
--- boost/clang-cl.patch.0	2020-12-09 13:56:14.000000000 -0500
+++ boost/clang-cl.patch.0	2020-12-25 18:11:14.000000000 -0500
@@ -46,3 +46,14 @@
        //For compilers supporting auto-tss cleanup
              //with Boost.Threads lib, use Boost.Threads lib
  #           define BOOST_THREAD_USE_LIB
+--- boost/ptr_container/ptr_sequence_adapter.hpp
++++ boost/ptr_container/ptr_sequence_adapter.hpp
+@@ -714,6 +714,8 @@
+             BOOST_ASSERT( first <= last && "out of range unique()/erase_if()" );
+             BOOST_ASSERT( this->begin() <= first && "out of range unique()/erase_if()" );
+             BOOST_ASSERT( last <= this->end() && "out of range unique()/erase_if)(" );             
++            (void)first;
++            (void)last;
+         }
+         
+         void range_check( iterator first, iterator last )
--- libpng/UnpackedTarball_libpng.mk	2020-12-17 16:59:38.000000000 -0500
+++ libpng/UnpackedTarball_libpng.mk	2020-12-28 12:49:19.000000000 -0500
@@ -9,7 +9,7 @@
 
 $(eval $(call gb_UnpackedTarball_UnpackedTarball,libpng))
 
-$(eval $(call gb_UnpackedTarball_set_tarball,libpng,$(LIBPNG_TARBALL)))
+$(eval $(call gb_UnpackedTarball_set_tarball,libpng,$(PNG_TARBALL)))
 
 $(eval $(call gb_UnpackedTarball_add_files,libpng,.,\
 	external/libpng/configs/pnglibconf.h \
--- libgltf/ExternalProject_libgltf.mk	2015-11-25 07:55:38.000000000 -0500
+++ libgltf/ExternalProject_libgltf.mk	2020-12-28 16:36:15.000000000 -0500
@@ -62,6 +62,7 @@
 	$(call gb_ExternalProject_run,build,\
 		export PKG_CONFIG="" \
 		&& ./configure \
+			$(if $(CROSS_COMPILING),--build=$(BUILD_PLATFORM) --host=$(HOST_PLATFORM)) \
 			--disable-shared \
 			--enable-static \
 			--with-pic \
--- openssl/ExternalProject_openssl.mk	2015-11-25 07:55:38.000000000 -0500
+++ openssl/ExternalProject_openssl.mk	2020-12-29 12:42:21.000000000 -0500
@@ -52,6 +52,7 @@
             $(if $(filter POWERPC,$(CPUNAME)),darwin-ppc-cc)\
             $(if $(filter INTEL,$(CPUNAME)),darwin-i386-cc)\
             $(if $(filter X86_64,$(CPUNAME)),darwin64-x86_64-cc)\
+            $(if $(filter AARCH64,$(CPUNAME)),darwin64-arm64-cc)\
           )\
         )\
       )\
--- openssl/UnpackedTarball_openssl.mk	2015-11-25 07:55:38.000000000 -0500
+++ openssl/UnpackedTarball_openssl.mk	2020-12-29 12:41:34.000000000 -0500
@@ -31,6 +31,7 @@
 	external/openssl/opensslios.patch \
 	external/openssl/opensslosxppc.patch \
 	external/openssl/openssl-3650-masm.patch.1 \
+	external/openssl/openssl-macos-arm64.patch.1 \
 ))
 
 # vim: set noet sw=4 ts=4:
--- /dev/null	2020-12-29 12:49:06.000000000 -0500
+++ openssl/openssl-macos-arm64.patch.1	2020-12-29 12:47:48.000000000 -0500
@@ -0,0 +1,11 @@
+--- a/Configure
++++ b/Configure
+@@ -626,6 +626,8 @@
+ "debug-darwin-i386-cc","cc:-arch i386 -g3 -DL_ENDIAN::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:BN_LLONG RC4_INT RC4_CHUNK DES_UNROLL BF_PTR:${x86_asm}:macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch i386 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
+ "darwin64-x86_64-cc","cc:-arch x86_64 -O3 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:".eval{my $asm=$x86_64_asm;$asm=~s/rc4\-[^:]+//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
+ "debug-darwin64-x86_64-cc","cc:-arch x86_64 -ggdb -g2 -O0 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:".eval{my $asm=$x86_64_asm;$asm=~s/rc4\-[^:]+//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
++"darwin64-arm64-cc","cc:-arch arm64 -O3 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:${no_asm}:macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
++"debug-darwin64-arm64-cc","cc:-arch arm64 -ggdb -g2 -O0 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:${no_asm}:macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
+ "debug-darwin-ppc-cc","cc:-DBN_DEBUG -DREF_CHECK -DCONF_DEBUG -DCRYPTO_MDEBUG -DB_ENDIAN -g -Wall -O::-D_REENTRANT:MACOSX::BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${ppc32_asm}:osx32:dlfcn:darwin-shared:-fPIC:-dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
+ # iPhoneOS/iOS
+ "iphoneos-cross","llvm-gcc:-O3 -isysroot \$(CROSS_TOP)/SDKs/\$(CROSS_SDK) -fomit-frame-pointer -fno-common::-D_REENTRANT:iOS:-Wl,-search_paths_first%:BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${no_asm}:dlfcn:darwin-shared:-fPIC -fno-common:-dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
--- openldap/openldap-2.4.31.patch	2015-11-25 07:55:38.000000000 -0500
+++ openldap/openldap-2.4.31.patch	2020-12-29 19:07:54.000000000 -0500
@@ -71,3 +71,13 @@
  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
  /* end confdefs.h.  */
  
+--- misc/openldap-2.4.31/build/config.sub	2012-04-22 16:25:08.000000000 -0400
++++ misc/build/openldap-2.4.31/build/config.sub	2020-12-29 19:01:06.000000000 -0500
+@@ -340,6 +340,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
--- coinmp/macosx.build.patch.1	2015-11-25 07:55:38.000000000 -0500
+++ coinmp/macosx.build.patch.1	2020-12-29 19:43:52.000000000 -0500
@@ -313,3 +313,63 @@
  	echo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}
  	exit ;;
      *:procnto*:*:* | *:QNX:[0123456789]*:*)
+--- coinmp/Cgl/config.sub	2010-06-13 13:52:57.000000000 -0400
++++ coinmp/Cgl/config.sub	2020-12-29 19:32:06.000000000 -0500
+@@ -314,6 +314,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
+--- coinmp/CoinUtils/config.sub	2010-06-13 13:53:51.000000000 -0400
++++ coinmp/CoinUtils/config.sub	2020-12-29 19:25:30.000000000 -0500
+@@ -314,6 +314,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
+--- coinmp/Cbc/config.sub	2010-06-13 13:52:10.000000000 -0400
++++ coinmp/Cbc/config.sub	2020-12-29 19:33:56.000000000 -0500
+@@ -314,6 +314,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
+--- coinmp/CoinMP/config.sub	2011-08-07 11:09:46.000000000 -0400
++++ coinmp/CoinMP/config.sub	2020-12-29 19:35:34.000000000 -0500
+@@ -314,6 +314,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
+--- coinmp/Osi/config.sub	2010-06-13 13:59:18.000000000 -0400
++++ coinmp/Osi/config.sub	2020-12-29 19:29:21.000000000 -0500
+@@ -314,6 +314,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
+--- coinmp/Clp/config.sub	2010-06-13 13:53:25.000000000 -0400
++++ coinmp/Clp/config.sub	2020-12-29 19:30:15.000000000 -0500
+@@ -314,6 +314,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
--- hunspell/UnpackedTarball_hunspell.mk	2015-11-25 07:55:38.000000000 -0500
+++ hunspell/UnpackedTarball_hunspell.mk	2020-12-29 20:38:16.000000000 -0500
@@ -20,6 +20,7 @@
 	external/hunspell/hunspell-fdo48017-wfopen.patch \
 	external/hunspell/hunspell-morph-overflow.patch \
 	external/hunspell/hunspell-1.3.3-rhbz1261421.patch \
+	external/hunspell/hunspell-macos.patch \
 ))
 
 ifeq ($(COM),MSC)
--- /dev/null	2020-12-29 20:39:01.000000000 -0500
+++ hunspell/hunspell-macos.patch	2020-12-29 20:36:11.000000000 -0500
@@ -0,0 +1,10 @@
+--- misc/hunspell-1.3.2/config.sub	2020-12-29 20:26:31.000000000 -0500
++++ misc/build/hunspell-1.3.2/config.sub	2020-12-29 20:32:05.000000000 -0500
+@@ -293,6 +293,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
--- libmspub/UnpackedTarball_libmspub.mk	2015-11-25 07:55:38.000000000 -0500
+++ libmspub/UnpackedTarball_libmspub.mk	2020-12-29 21:06:22.000000000 -0500
@@ -11,4 +11,8 @@
 
 $(eval $(call gb_UnpackedTarball_set_tarball,libmspub,$(MSPUB_TARBALL)))
 
+$(eval $(call gb_UnpackedTarball_add_patches,libmspub,\
+    external/libmspub/libmspub-macos.patch \
+))
+
 # vim: set noet sw=4 ts=4:
--- /dev/null	2020-12-29 21:10:06.000000000 -0500
+++ libmspub/libmspub-macos.patch	2020-12-29 21:09:20.000000000 -0500
@@ -0,0 +1,10 @@
+--- a/libmspub/config.sub	2012-06-30 08:54:32.000000000 -0400
++++ b/libmspub/config.sub	2020-12-29 21:00:35.000000000 -0500
+@@ -355,6 +355,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
--- cppunit/unix.patch	2015-11-25 07:55:38.000000000 -0500
+++ cppunit/unix.patch	2020-12-30 17:13:19.000000000 -0500
@@ -8,3 +8,13 @@
  }
  
  
+--- misc/cppunit-1.13.1/config/config.sub	2012-07-07 11:34:23.000000000 -0400
++++ misc/build/cppunit-1.13.1/config/config.sub	2020-12-30 17:10:56.000000000 -0500
+@@ -327,6 +327,7 @@
+ 	# Recognize the basic CPU types with company name.
+ 	580-* \
+ 	| a29k-* \
++	| aarch64-* | aarch64_be-* \
+ 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
+ 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
+ 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
--- liborcus/include.patch.0	2020-12-17 16:59:38.000000000 -0500
+++ liborcus/include.patch.0	2021-04-28 19:40:47.000000000 -0400
@@ -28,3 +28,20 @@
  
  using namespace std;
  
+--- src/parser/types.cpp
++++ src/parser/types.cpp
+@@ -13,6 +13,14 @@
+ #include <sstream>
+ #include <mdds/sorted_string_map.hpp>
+ 
++#if __cplusplus <= 201103L
++namespace std
++{
++template< class T >
++using underlying_type_t = typename underlying_type<T>::type;
++}
++#endif
++
+ namespace orcus {
+ 
+ const xmlns_id_t XMLNS_UNKNOWN_ID = nullptr;
