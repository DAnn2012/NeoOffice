Index: source/Common/OdfConverterLib/Makefile
===================================================================
--- source/Common/OdfConverterLib/Makefile	(revision 4259)
+++ source/Common/OdfConverterLib/Makefile	(working copy)
@@ -28,10 +28,12 @@
 all-local: OdfConverterLib.dll OdfConverterLibStatic.dll 
 OdfConverterLib.dll: $(SOURCE) Makefile $(OOX2ODF_RES) $(ODF2OOX_RES)
 	gmcs $(CSC_DEBUG) $(RESOURCE_FLAGS) -target:library -reference:../OdfZipUtils/OdfZipUtils.dll \
+        -r:System.Data \
 		-out:OdfConverterLib.dll $(SOURCE)
 
 OdfConverterLibStatic.dll: $(SOURCE) Makefile $(OOX2ODF_RES) $(ODF2OOX_RES)
 	gmcs $(CSC_DEBUG) $(RESOURCE_FLAGS) -target:library -reference:../OdfZipUtils/OdfZipUtilsStatic.dll \
+        -r:System.Data \
 		-out:OdfConverterLibStatic.dll $(SOURCE)
 
 clean-local:
Index: source/Common/OdfZipUtils/Makefile
===================================================================
--- source/Common/OdfZipUtils/Makefile	(revision 4259)
+++ source/Common/OdfZipUtils/Makefile	(working copy)
@@ -10,10 +10,12 @@
 
 OdfZipUtils.dll : $(SOURCE)
 	$(CSC) $(CSC_DEBUG) -target:library \
+         -r:System.Drawing \
 	     -out:OdfZipUtils.dll $(SOURCE)
 
 OdfZipUtilsStatic.dll : $(SOURCE)
 	$(CSC) $(CSC_DEBUG) -d:STATIC -target:library \
+         -r:System.Drawing \
 	     -out:OdfZipUtilsStatic.dll $(SOURCE)
 
 clean-local:
--- source/Spreadsheet/Converter/OoxMaximumCellTextPostProcessor.cs	2008-01-11 16:27:26.000000000 -0800
+++ source/Spreadsheet/Converter/OoxMaximumCellTextPostProcessor.cs	2008-01-16 12:38:04.000000000 -0800
@@ -170,10 +170,8 @@
             else if (isInMaxLength)
             {
                     this.isAtribute = false;
-                    if (this.totalStringLength < MAX_CELL_TEXT_LENGTH)
-                    {
-                        this.nextWriter.WriteEndAttribute();
-                    }
+                    // Fix bug described at http://bugzilla.neooffice.org/bug.php?op=show&bugid=2794&pos=5 using the fix described at https://bugzilla.novell.com/show_bug.cgi?id=332246
+                    this.nextWriter.WriteEndAttribute();
             }
             else
             {
Index: source/Spreadsheet/Converter/OOXStyleCellPostProcessor.cs
===================================================================
--- source/Spreadsheet/Converter/OOXStyleCellPostProcessor.cs	(revision 4259)
+++ source/Spreadsheet/Converter/OOXStyleCellPostProcessor.cs	(working copy)
@@ -128,6 +128,8 @@
             else if (this.changeCellName)
             {
                 this.changeCellName = false;
+				// Fix bug described at http://bugzilla.neooffice.org/bug.php?op=show&bugid=2794&pos=5 using the fix described at https://bugzilla.novell.com/show_bug.cgi?id=332246
+				this.nextWriter.WriteEndAttribute();
             }
             else
             {
Index: source/Spreadsheet/Converter/resources/odf2oox/sharedStrings.xsl
===================================================================
--- source/Spreadsheet/Converter/resources/odf2oox/sharedStrings.xsl	(revision 4259)
+++ source/Spreadsheet/Converter/resources/odf2oox/sharedStrings.xsl	(working copy)
@@ -133,16 +133,16 @@
         <xsl:value-of select="."/>
       </xsl:variable>
       <!-- caution with 'Enters' because they can result with additional space in output text -->
-      <t xml:space="preserve"><xsl:choose>
+      <xsl:choose>
-        <xsl:when test="not(contains($value, '_x'))"><xsl:value-of select="$value"/></xsl:when>
+        <xsl:when test="not(contains($value, '_x'))"><t xml:space="preserve"><xsl:value-of select="$value"/></t></xsl:when>
         <xsl:otherwise>
           <xsl:call-template name="HexaDecimalValue">
             <xsl:with-param name="value">
-              <xsl:value-of select="$value"/>
+              <t xml:space="preserve"><xsl:value-of select="$value"/></t>
             </xsl:with-param>
           </xsl:call-template>
         </xsl:otherwise>
-      </xsl:choose></t>
+      </xsl:choose>
     </r>
   </xsl:template>
 
Index: source/Spreadsheet/Converter/resources/odf2oox/worksheets.xsl
===================================================================
--- source/Spreadsheet/Converter/resources/odf2oox/worksheets.xsl	(revision 4259)
+++ source/Spreadsheet/Converter/resources/odf2oox/worksheets.xsl	(working copy)
@@ -528,7 +528,7 @@
           <xsl:for-each select="style:table-properties">
             <xsl:if test="attribute::style:writing-mode='rl-tb'">
               <xsl:attribute name="rightToLeft">
-                <xsl:value-of select="1"> </xsl:value-of>
+                <xsl:value-of select="1"></xsl:value-of>
               </xsl:attribute>
             </xsl:if>
           </xsl:for-each>
Index: source/Spreadsheet/Converter/resources/oox2odf/insert_text.xsl
===================================================================
--- source/Spreadsheet/Converter/resources/oox2odf/insert_text.xsl	(revision 4259)
+++ source/Spreadsheet/Converter/resources/oox2odf/insert_text.xsl	(working copy)
@@ -587,11 +587,7 @@
 
       <xsl:when test="not(contains($string,'../')) and not(contains($string,'..\..\'))">
 
-        <xsl:value-of select="concat('../',$string)">
-          <!--xsl:call-template name="Change20PercentToSpace">
-              <xsl:with-param name="slash" select="concat('..\',substring-after($string,''))"/>
-              </xsl:call-template-->
-        </xsl:value-of>
+        <xsl:value-of select="concat('../',$string)"></xsl:value-of>
 
       </xsl:when>
 
--- source/Word/Converter/OoxChangeTrackingPostProcessor.cs	2008-01-10 18:34:37.000000000 -0800
+++ source/Word/Converter/OoxChangeTrackingPostProcessor.cs	2008-01-10 18:48:40.000000000 -0800
@@ -757,18 +757,22 @@
             Stack tmp = new Stack();
             Element element = (Element)this.currentNode.Peek();
             string id = element.GetAttributeValue("id", PCT_NAMESPACE);
-            Element region = (Element)this.currentInsertionRegion.Pop();
-            while (!id.Equals(region.GetAttributeValue("id", PCT_NAMESPACE)))
-            {
-                tmp.Push(region);
-                region = (Element)this.currentInsertionRegion.Pop();
-            }
-            while (tmp.Count > 0)
+            // Fix bug 1863275 by detecting if the stack is empty
+            if (this.currentInsertionRegion.Count > 0)
             {
-                this.currentInsertionRegion.Push(tmp.Pop());
+                Element region = (Element)this.currentInsertionRegion.Pop();
+                while (!id.Equals(region.GetAttributeValue("id", PCT_NAMESPACE)))
+                {
+                    tmp.Push(region);
+                    region = (Element)this.currentInsertionRegion.Pop();
+                }
+                while (tmp.Count > 0)
+                {
+                    this.currentInsertionRegion.Push(tmp.Pop());
+                }
+                // save the last region in case we need it before closing a paragraph
+                this.lastInsertionRegion = region;
             }
-            // save the last region in case we need it before closing a paragraph
-            this.lastInsertionRegion = region;
         }
 
 
--- source/Common/OdfConverterLib/OdfCharactersPostProcessor.cs	2008-03-04 17:07:13.000000000 -0800
+++ source/Common/OdfConverterLib/OdfCharactersPostProcessor.cs	2008-03-05 11:23:02.000000000 -0800
@@ -773,15 +773,22 @@
             zipobj.Close();
 
 
-            string[] arrValues = new string[3];
-            arrValues = widht_height_res.Split(':');
-            double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-            double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-            double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+            double cx = 2.54 / 72;
+            double cy = 2.54 / 72;
+            try
+            {
+                string[] arrValues = new string[3];
+                arrValues = widht_height_res.Split(':');
+                double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
 
-
-            double cx = width * 2.54 / res;
-            double cy = height * 2.54 / res;
+                cx = width * 2.54 / res;
+                cy = height * 2.54 / res;
+            }
+            catch (Exception ex)
+            {
+            }
 
             double odpLeft = left * cx / 100000;
             double odpRight = right * cx / 100000;
--- source/Common/OdfConverterLib/OoxCharactersPostProcessor.cs	2008-03-05 00:56:23.000000000 -0800
+++ source/Common/OdfConverterLib/OoxCharactersPostProcessor.cs	2008-03-05 11:19:38.000000000 -0800
@@ -686,14 +686,22 @@
             zipobj.Close();
 
 
-            string[] arrValues = new string[3];
-            arrValues = widht_height_res.Split(':');
-            double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-            double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-            double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+            double cx = 2.54 / 72;
+            double cy = 2.54 / 72;
+            try
+            {
+                string[] arrValues = new string[3];
+                arrValues = widht_height_res.Split(':');
+                double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
 
-            double cx = width * 2.54 / res;
-            double cy = height * 2.54 / res;
+                cx = width * 2.54 / res;
+                cy = height * 2.54 / res;
+            }
+            catch (Exception ex)
+            {
+            }
 
             int pptLeft = (int)(left * 100000 / cx);
             int pptRight = (int)(right * 100000 / cx);
--- source/Common/OdfZipUtils/ZipArchiveWriter.cs	2008-03-04 17:07:13.000000000 -0800
+++ source/Common/OdfZipUtils/ZipArchiveWriter.cs	2008-03-05 10:57:13.000000000 -0800
@@ -1134,13 +1134,19 @@
         /// <param name="source">Relative path inside the source archive</param>
         public string ImageCopyBinary(String source)
         {
-            Stream sourceStream = GetStream(source);
+            try
+            {
+                Stream sourceStream = GetStream(source);
 
-            System.Drawing.Image img;
-            img = System.Drawing.Image.FromStream(sourceStream);
-
-            return img.Width.ToString() + ":" + img.Height.ToString() + ":" + img.VerticalResolution.ToString();
+                System.Drawing.Image img;
+                img = System.Drawing.Image.FromStream(sourceStream);
 
+                return img.Width.ToString() + ":" + img.Height.ToString() + ":" + img.VerticalResolution.ToString();
+            }
+            catch (Exception ex)
+            {
+                return "";
+            }
         }
     }
 
--- source/Spreadsheet/Converter/OdfSharedStringsPostProcessor.cs	2008-03-04 17:07:15.000000000 -0800
+++ source/Spreadsheet/Converter/OdfSharedStringsPostProcessor.cs	2008-03-05 11:25:19.000000000 -0800
@@ -200,15 +200,22 @@
                 zipObj.Close();
                 resolverObj.Dispose();
 
-                string[] arrValues = new string[3];
-                arrValues = imgaeValues.Split(':');
-                double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-                double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-                double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-
-
-                double cx = width * 2.54 / res;
-                double cy = height * 2.54 / res;
+                double cx = 2.54 / 72;
+                double cy = 2.54 / 72;
+                try
+                {
+                    string[] arrValues = new string[3];
+                    arrValues = imgaeValues.Split(':');
+                    double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                    double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                    double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+
+                    cx = width * 2.54 / res;
+                    cy = height * 2.54 / res;
+                }
+                catch (Exception ex)
+                {
+                }
 
                 double odpLeft = (left * cx / 100000)/2.54;
                 double odpRight = (right * cx / 100000)/2.54;
--- source/Spreadsheet/Converter/OoxCommentsPostProcessor.cs	2008-03-04 17:07:15.000000000 -0800
+++ source/Spreadsheet/Converter/OoxCommentsPostProcessor.cs	2008-03-05 11:25:36.000000000 -0800
@@ -156,14 +156,22 @@
                 zipobj.Close();
 
 
-                string[] arrValues = new string[3];
-                arrValues = widht_height_res.Split(':');
-                double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-                double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
-                double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                double cx = 2.54 / 72;
+                double cy = 2.54 / 72;
+                try
+                {
+                    string[] arrValues = new string[3];
+                    arrValues = widht_height_res.Split(':');
+                    double width = double.Parse(arrValues[0].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                    double height = double.Parse(arrValues[1].ToString(),System.Globalization.CultureInfo.InvariantCulture);
+                    double res = double.Parse(arrValues[2].ToString(),System.Globalization.CultureInfo.InvariantCulture);
 
-                double cx = width * 2.54 / res;
-                double cy = height * 2.54 / res;
+                    cx = width * 2.54 / res;
+                    cy = height * 2.54 / res;
+                }
+                catch (Exception ex)
+                {
+                }
 
                 int pptLeft=0; 
                 int pptRight=0;
