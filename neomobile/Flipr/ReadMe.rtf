{\rtf1\ansi\ansicpg1252\cocoartf929
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs36 \cf0 NSWindow_Flipr
\fs24 \
\
This category on NSWindow allows you to switch one window for another, using the "flip" animation popularized by Dashboard widgets. This was a nice excuse to learn something about CoreImage and how to use it in Cocoa. The demo app shows how to use it.\
Scroll to the end to see what's new in this version!\
\
Basically, all you need to do is something like:\

\f1\fs18 	[someWindow flipToShowWindow:someOtherWindow forward:YES];\

\f0\fs24 \
However, this code makes some assumptions:\
\'97 
\f1\fs18 someWindow
\f0\fs24  (the initial window) is already visible on-screen.\
\'97 
\f1\fs18 someOtherWindow
\f0\fs24  (the final window) is 
\i not
\i0  already visible on-screen.\
\'97 Both windows can be resized to the same size, and aren't too large or complicated \'97 the latter conditions being less important the faster your CPU/video card is.\
\'97 The windows won't go away while the animation is running.\
\'97 The user won't try to click on the animated window or do something while the animation is running.\
\
The implementation is quite straightforward. I move the final to the same position and size as the initial window. I then position a larger transparent window so it covers that frame. I render both window contents into CIImages, hide both windows, and start the animation. Each frame of the animation renders a perspective-distorted image into the transparent window. When the animation is done, I show the final window. Some tricks are used to make this faster; the flipping window is setup only once; the final window is hidden by setting its alpha to 0.0, not by ordering it out and later ordering it back in again, for instance. \
\
The main bottleneck is the CoreImage filter, and the first frame always takes much longer to render \'97 4 or 6 times what it takes for the remaining frames. I suppose this time is spent with setup and downloading to the video card. So I calculate the time this takes and draw a second frame at a stage where the rotation begins to show. The animation begins at this point, but, if those first two frames took too long, I stretch the duration to make sure that at least 5 more frames will get rendered. This will happen with slow hardware or large windows. At the end, I don't render the last frame at all and swap the final window in instead.\
\
Known bugs and things to fiddle with:\
\'97 Clicking on the animation will "click through" to the window below. Probably you should subclass NSWindow for the flipping window and make it accept mouse clicks without coming to the front. In the current version, hiding the cursor avoids this.\
\'97 The shadow is set to approximate Tiger's normal NSWindow shadow. You'll have to change it for NSPanels and for NSWindow in Leopard. This is left as an exercise for the student :-)...\
\'97 The animation isn't synched to the screen redraw. You may occasionally notice some tearing for large windows. I don't think it matters in practice, but...\
\'97 The margins for the flipping window are arbitrarily set to be large enough for the usual cases. You could work out perspective calculations to make them the minimum size, this might make the animation a little smoother.\
\'97 The window's resize indicator is not rendered. One solution would be to obtain the proper resize indicator image from Carbon (which is not documented), find out the resize indicator's rect (ditto), and render it yourself.\
\'97 A thin gray line around the window is not rendered; this is apparently generated by the window manager, as it doesn't appear in screen captures either. I found no generic or fast way to draw this for arbitrary windows.\
\'97 The images are not anti-aliased or motion-blurred during the animation; no idea if CoreImage allows doing so. If you find out, tell me.\
\'97 On older Macs (like my PowerBook G4) the rendering isn't properly antialiased for some combinations of odd window sizes or alignments. You could try to find out the exact conditions and round up the rectangles to avoid this.\
\'97 The shadow is non-realistic for a window turning in 3D \'97 for that matter, the window itself doesn't turn too realistically either; should its back edge slice into the windows behind it? Shouldn't it have a 1-pixel thickness when viewed edge-on? Although it behaves just like the shadow in Dashboard, so there. Calculating a realistic window with realistic shadow is left as an exercise for the student... :-). I suppose doing this would need a direct OpenGL implementation, or some undocumented CoreGraphics wizardry.\
\
I've cribbed a few lines from {\field{\*\fldinst{HYPERLINK "http://boredzo.org/imageshadowadder/"}}{\fldrslt \cf2 \ul \ulc2 http://boredzo.org/imageshadowadder/}} by Peter Hosey, and a dozen lines from {\field{\*\fldinst{HYPERLINK "http://www.macs.hw.ac.uk/~rpointon/osx/coreimage.html"}}{\fldrslt \cf2 \ul \ulc2 http://www.macs.hw.ac.uk/~rpointon/osx/coreimage.html}} by Robert Pointon. Thanks to both for making their code available.\
\
Copyright \'a92006,2007 by Rainer Brockerhoff <{\field{\*\fldinst{HYPERLINK "mailto:rainer@brockerhoff.net"}}{\fldrslt rainer@brockerhoff.net}}>.\
This source code is licensed under the {\field{\*\fldinst{HYPERLINK "http://www.opensource.org/licenses/mit-license.php"}}{\fldrslt MIT license}}, approved by the {\field{\*\fldinst{HYPERLINK "http://www.opensource.org/index.php"}}{\fldrslt Open Source Initiative}}.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sa260\ql\qnatural
\cf0 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. A reference in the "About box" or somewhere else in the documentation would be sufficient.\
And... comments are welcome! Look for updates and other goodies on my {\field{\*\fldinst{HYPERLINK "http://www.brockerhoff.net/src/index.html"}}{\fldrslt source}} page.\

\b New in this version:
\b0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \'97 The cursor is now hidden while the window is flipping over.\
\'97 The initial frames are now calculated correctly even if animation is slower; this caused a "stutter" on the second frame with slower animations and/or on faster machines.\
\'97 Now slows the animation down 5x if the shift key is down, as traditional.\
}