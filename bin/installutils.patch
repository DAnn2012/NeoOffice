#!/bin/bash -x
##########################################################################
# 
#   $RCSfile$
# 
#   $Revision$
# 
#   last change: $Author$ $Date$
# 
#   The Contents of this file are made available subject to the terms of
#   either of the following licenses
# 
#          - GNU General Public License Version 2.1
# 
#   Patrick Luby, June 2003
# 
#   GNU General Public License Version 2.1
#   =============================================
#   Copyright 2003 Planamesa Inc.
# 
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public
#   License version 2.1, as published by the Free Software Foundation.
# 
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.
# 
#   You should have received a copy of the GNU General Public
#   License along with this library; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#   MA  02111-1307  USA
# 
##########################################################################

product_patch_version=`echo $(PRODUCT_PATCH_VERSION) | sed 's#^Patch ##'`
userinstall="$HOME/Library/Preferences/$(PRODUCT_DIR_NAME)-$(PRODUCT_VERSION_FAMILY)"
target_file_type="$(TARGET_FILE_TYPE)"
mdimporter_id="$(NEOLIGHT_MDIMPORTER_ID)"
qlplugin_id="$(NEOPEEK_QLPLUGIN_ID)"

check_installation() {

	if [ -z "$1" ] ; then
		return 1;
	fi

	file_type=`file "$1/Contents/MacOS/soffice.bin" | sed 's#^.*: ##'`
	if [ "$file_type" != "$target_file_type" ] ; then
		return 1
	fi

	if [ ! -f "$1/Contents/Info.plist" ] ; then
		return 1;
	fi

	# Check for matching build machine
	grep '$(BUILD_MACHINE)' "$1/Contents/Info.plist" >/dev/null 2>&1
	if [ "$?" != "0" ] ; then
		return 1;
	fi

	if [ -f "$1/Contents/MacOS/bootstraprc" ] ; then
		productkey=`grep '^ProductKey=' "$1/Contents/MacOS/bootstraprc"`
		productpatch=`grep '^ProductPatch=' "$1/Contents/MacOS/bootstraprc"`
		if [ -z "$productkey" -o -z "$productpatch" ] ; then
			return 1;
		fi
		productkey=`echo $productkey | awk -F= '{ print $2 }'`
		productpatch=`echo $productpatch | awk -F= '{ print $2 }' | sed 's#^Patch ##'`

		# Allow only an exact product version match
		if [ "$productkey" = "$(PRODUCT_NAME) $(PRODUCT_VERSION)" ] ; then
			if [ -z "$productpatch" ] ; then
				return 0
			elif [ "$productpatch" -le "$product_patch_version" ] ; then
				return 0
			fi
		elif [ "$productkey" = "$(PRODUCT_NAME) $(PREVIOUS_PRODUCT_VERSION)" ] ; then
			return 0
		fi
	fi

	return 1

}

update_installation() {

	if [ ! -f "$1/Contents/Archive.pax.gz" ] ; then
		return 0;
	fi

	check_installation "$2" || return 0

	# Unzip new files
	( cd "$2" || exit 1 ; pax -r -z -f "$1/Contents/Archive.pax.gz" ) || return 1

	# Fix bug 2711 by updating plugin bundle IDs
	mdimporter_file="$2/Contents/Library/Spotlight/neolight.mdimporter/Contents/Info.plist"
	rm -f "$mdimporter_file.tmp"
	if [ ! -z "$mdimporter_id" -a -f "$mdimporter_file" ] ; then
		sed "s#$mdimporter_id#$mdimporter_id.`date '+%Y%m%d%H%M%S'`#g" "$mdimporter_file" > "$mdimporter_file.tmp"
		if [ -s "$mdimporter_file.tmp" ] ; then
			mv -f "$mdimporter_file.tmp" "$mdimporter_file"
			chmod -f 444 "$mdimporter_file"
		fi
		rm -f "$mdimporter_file.tmp"
	fi

	qlplugin_file="$2/Contents/Library/QuickLook/neopeek.qlgenerator/Contents/Info.plist"
	rm -f "$qlplugin_file.tmp"
	if [ ! -z "$qlplugin_id" -a -f "$qlplugin_file" ] ; then
		sed "s#$qlplugin_id#$qlplugin_id.`date '+%Y%m%d%H%M%S'`#g" "$qlplugin_file" > "$qlplugin_file.tmp"
		if [ -s "$qlplugin_file.tmp" ] ; then
			mv -f "$qlplugin_file.tmp" "$qlplugin_file"
			chmod -f 444 "$qlplugin_file"
		fi
		rm -f "$qlplugin_file.tmp"
	fi

	sync

	# Install shared .oxt files
	REAL_INSTALLER_TEMP=`cd "$INSTALLER_TEMP" ; pwd`
	if [ "$INSTALLER_TEMP" != "$HOME" -a "$REAL_INSTALLER_TEMP" != "$HOME" ] ; then
		for i in `cd "$1/Contents/Resources" ; find . -name "*.oxt"` ; do
			( cd "$2/Contents/MacOS" || exit 1 ; HOME="$INSTALLER_TEMP" ; export HOME ; DYLD_LIBRARY_PATH="$2/Contents/basis-link/program:$2/Contents/basis-link/ure-link/lib" ; export DYLD_LIBRARY_PATH ; rm -Rf "$INSTALLER_TEMP/Library/Preferences/$(PRODUCT_DIR_NAME)-$(PRODUCT_VERSION_FAMILY)" ; "./unopkg.bin" remove --shared `basename "$i"` ; rm -Rf "$INSTALLER_TEMP/Library/Preferences/$(PRODUCT_DIR_NAME)-$(PRODUCT_VERSION_FAMILY)" ; "./unopkg.bin" add --shared "$i" )
			sync
		done
	fi

	# Mark certain directories writable for admin group
	chmod -f 775 "$2" || return 1
	chmod -Rf a+r,a-w "$2/Contents" || return 1
	chmod -f 775 "$2/Contents" || return 1
	chmod -Rf ug+w "$2/Contents/Resources" || return 1

	# Fix bug 1584 by marking certain directories writable for root user
	chmod -Rf u+w "$2/Contents/basis-link/presets" || exit 1
	chmod -Rf u+w "$2/Contents/basis-link/share" || exit 1

	# Touch shared libraries to fix bug 280
	for i in `cd "$2/Contents" ; find . -type f -name "*.dylib*" ; find . -type f -name "*.bin" ; find . -type f -name "*.jar"`; do
		touch -f "$2/Contents/$i"   
	done

	sudo_user=
	if [ ! -z "$USER" -a `id -u "$USER"` != "0" ] ; then
		sudouser="$USER"
	fi

	lsregister="/System/Library/Frameworks/ApplicationServices.framework/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister"
	if [ ! -x "$lsregister" ] ; then
		lsregister="/System/Library/Frameworks/CoreServices.framework/Versions/Current/Frameworks/LaunchServices.framework/Versions/Current/Support/lsregister"
		if [ -x "$lsregister" ] ; then
			lsregisterargs="-f -r -all s,d,u"
		else
			lsregister=
		fi
	fi

	if [ ! -z "$lsregister" ] ; then
		"$lsregister" $lsregisterargs "$2"
		if [ ! -z "$sudouser" ] ; then
			sudo -H -u "$sudouser" -i -- -c "$lsregister $lsregisterargs \"$2\""
		fi
	fi

	# Touch installation directory to force activation of any bundled Spotlight
	# plugins
	touch -f "$2"

	# Register the QuickLook plugin
	if [ -x "/usr/bin/qlmanage" ] ; then
		/usr/bin/qlmanage -r
		if [ ! -z "$sudouser" ] ; then
			sudo -H -u "$sudouser" -i -- -c "/usr/bin/qlmanage -r"
		fi
	fi

	return 0

}

check_running() {

	check_installation "$1"
	return "$?"

}
